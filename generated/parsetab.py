
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP AROUND CIRCLE COLOR FOR IDENTIFIER MUL_OP NUMBER POINT POLYGON PRINT RADIUS RECT ROTATE SIZE TRANSLATE program : subprogram  subprogram : statement ';'  subprogram : statement ';' subprogram  statement : assignation\n        | assignation_shape\n        | structure\n        | shape\n        | animation  statement : PRINT expression  structure : FOR '(' expression ',' expression ',' expression ')' '{' subprogram '}'  animation : translation  translation : TRANSLATE '(' animation_param ',' point_expression ')'  translation : ROTATE '(' animation_param ',' expression ',' AROUND '(' point_expression ')' ')'  animation_param : IDENTIFIER  animation_param : shape  shape : circle_g \n        | rect_g\n        | polygon_g  circle_g : CIRCLE '{' point_expression ',' RADIUS '(' expression ')' ',' color_expression '}'  rect_g : RECT '{' point_expression ',' size_expression ',' color_expression '}'  polygon_g : POLYGON '{' '(' points_expression ')' ',' color_expression '}'  points_expression : point_expression  points_expression : point_expression ',' points_expression  point_expression : POINT '(' expression ',' expression ')'  size_expression : SIZE '(' expression ',' expression ')'  color_expression : COLOR '(' expression ',' expression ',' expression ')' expression : expression ADD_OP expression\n            | expression MUL_OP expressionexpression : NUMBER\n        | IDENTIFIER expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation_shape : IDENTIFIER '=' shape  assignation : IDENTIFIER '=' expression "
    
_lr_action_items = {'PRINT':([0,21,95,],[9,9,9,]),'IDENTIFIER':([0,9,21,23,26,27,28,32,33,35,36,53,55,60,70,71,72,74,91,92,95,102,109,],[10,25,10,25,25,25,25,47,47,25,25,25,25,25,25,25,25,25,25,25,10,25,25,]),'FOR':([0,21,95,],[11,11,11,]),'CIRCLE':([0,21,27,32,33,95,],[16,16,16,16,16,16,]),'RECT':([0,21,27,32,33,95,],[17,17,17,17,17,17,]),'POLYGON':([0,21,27,32,33,95,],[18,18,18,18,18,18,]),'TRANSLATE':([0,21,95,],[19,19,19,]),'ROTATE':([0,21,95,],[20,20,20,]),'$end':([1,2,21,34,],[0,-1,-2,-3,]),';':([3,4,5,6,7,8,12,13,14,15,22,24,25,37,39,40,50,51,52,77,90,93,105,106,108,],[21,-4,-5,-6,-7,-8,-16,-17,-18,-11,-9,-29,-30,-32,-34,-33,-27,-28,-31,-12,-20,-21,-10,-19,-13,]),'NUMBER':([9,23,26,27,28,35,36,53,55,60,70,71,72,74,91,92,102,109,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'(':([9,11,19,20,23,26,27,28,31,35,36,43,53,55,60,62,65,70,71,72,74,83,86,91,92,102,109,],[26,28,32,33,26,26,26,26,45,26,26,55,26,26,26,71,74,26,26,26,26,91,94,26,26,26,26,]),'ADD_OP':([9,22,23,24,25,26,27,28,35,36,37,38,39,41,50,51,52,53,55,60,61,63,69,70,71,72,74,79,80,81,84,91,92,97,98,102,107,109,110,],[23,35,23,-29,-30,23,23,23,23,23,-32,35,35,35,-27,-28,-31,23,23,23,35,35,35,23,23,23,23,35,35,35,35,23,23,35,35,23,35,23,35,]),'=':([10,],[27,]),',':([12,13,14,24,25,37,41,42,44,46,47,48,49,50,51,52,58,61,63,64,66,69,84,88,89,90,93,97,103,106,107,],[-16,-17,-18,-29,-30,-32,53,54,56,59,-14,-15,60,-27,-28,-31,67,70,72,73,75,78,92,96,-24,-20,-21,102,-25,-19,109,]),'{':([16,17,18,87,],[29,30,31,95,]),'}':([21,34,82,85,100,101,111,],[-2,-3,90,93,105,106,-26,]),'MUL_OP':([22,24,25,37,38,39,41,50,51,52,61,63,69,79,80,81,84,97,98,107,110,],[36,-29,-30,-32,36,36,36,36,-28,-31,36,36,36,36,36,36,36,36,36,36,36,]),')':([24,25,37,38,50,51,52,57,58,68,76,79,80,81,89,98,99,104,110,],[-29,-30,-32,52,-27,-28,-31,66,-22,77,-23,87,88,89,-24,103,104,108,111,]),'POINT':([29,30,45,59,67,94,],[43,43,43,43,43,43,]),'RADIUS':([54,],[62,]),'SIZE':([56,],[65,]),'COLOR':([73,75,96,],[83,83,83,]),'AROUND':([78,],[86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'subprogram':([0,21,95,],[2,34,100,]),'statement':([0,21,95,],[3,3,3,]),'assignation':([0,21,95,],[4,4,4,]),'assignation_shape':([0,21,95,],[5,5,5,]),'structure':([0,21,95,],[6,6,6,]),'shape':([0,21,27,32,33,95,],[7,7,40,48,48,7,]),'animation':([0,21,95,],[8,8,8,]),'circle_g':([0,21,27,32,33,95,],[12,12,12,12,12,12,]),'rect_g':([0,21,27,32,33,95,],[13,13,13,13,13,13,]),'polygon_g':([0,21,27,32,33,95,],[14,14,14,14,14,14,]),'translation':([0,21,95,],[15,15,15,]),'expression':([9,23,26,27,28,35,36,53,55,60,70,71,72,74,91,92,102,109,],[22,37,38,39,41,50,51,61,63,69,79,80,81,84,97,98,107,110,]),'point_expression':([29,30,45,59,67,94,],[42,44,58,68,58,99,]),'animation_param':([32,33,],[46,49,]),'points_expression':([45,67,],[57,76,]),'size_expression':([56,],[64,]),'color_expression':([73,75,96,],[82,85,101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> subprogram','program',1,'p_program_statement','parser5.py',7),
  ('subprogram -> statement ;','subprogram',2,'p_program_subprogram','parser5.py',11),
  ('subprogram -> statement ; subprogram','subprogram',3,'p_program_recursive','parser5.py',15),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',19),
  ('statement -> assignation_shape','statement',1,'p_statement','parser5.py',20),
  ('statement -> structure','statement',1,'p_statement','parser5.py',21),
  ('statement -> shape','statement',1,'p_statement','parser5.py',22),
  ('statement -> animation','statement',1,'p_statement','parser5.py',23),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser5.py',27),
  ('structure -> FOR ( expression , expression , expression ) { subprogram }','structure',11,'p_structure','parser5.py',31),
  ('animation -> translation','animation',1,'p_animation','parser5.py',35),
  ('translation -> TRANSLATE ( animation_param , point_expression )','translation',6,'p_animation_translation','parser5.py',39),
  ('translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) )','translation',11,'p_animation_rotation','parser5.py',43),
  ('animation_param -> IDENTIFIER','animation_param',1,'p_animation_param_id','parser5.py',47),
  ('animation_param -> shape','animation_param',1,'p_animation_param_shape','parser5.py',51),
  ('shape -> circle_g','shape',1,'p_shape','parser5.py',55),
  ('shape -> rect_g','shape',1,'p_shape','parser5.py',56),
  ('shape -> polygon_g','shape',1,'p_shape','parser5.py',57),
  ('circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression }','circle_g',11,'p_circle_g','parser5.py',61),
  ('rect_g -> RECT { point_expression , size_expression , color_expression }','rect_g',8,'p_rect_g','parser5.py',65),
  ('polygon_g -> POLYGON { ( points_expression ) , color_expression }','polygon_g',8,'p_polygon_g','parser5.py',69),
  ('points_expression -> point_expression','points_expression',1,'p_expression_points','parser5.py',73),
  ('points_expression -> point_expression , points_expression','points_expression',3,'p_expression_points_recursive','parser5.py',77),
  ('point_expression -> POINT ( expression , expression )','point_expression',6,'p_expression_point','parser5.py',81),
  ('size_expression -> SIZE ( expression , expression )','size_expression',6,'p_expression_size','parser5.py',85),
  ('color_expression -> COLOR ( expression , expression , expression )','color_expression',8,'p_expression_color','parser5.py',89),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',93),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',94),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parser5.py',98),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser5.py',99),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',103),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',107),
  ('assignation_shape -> IDENTIFIER = shape','assignation_shape',3,'p_assign_shape','parser5.py',111),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser5.py',115),
]
