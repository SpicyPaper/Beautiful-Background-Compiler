Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> subprogram
Rule 2     subprogram -> statement ;
Rule 3     subprogram -> statement ; subprogram
Rule 4     statement -> assignation
Rule 5     statement -> assignation_shape
Rule 6     statement -> assignation_color
Rule 7     statement -> assignation_point
Rule 8     statement -> assignation_size
Rule 9     statement -> assignation_time
Rule 10    statement -> structure
Rule 11    statement -> shape
Rule 12    statement -> animation
Rule 13    statement -> PRINT expression
Rule 14    structure -> FOR ( expression , expression , expression ) { subprogram }
Rule 15    animation -> translation
Rule 16    translation -> TRANSLATE ( animation_param , point_expression )
Rule 17    translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) )
Rule 18    animation_param -> IDENTIFIER
Rule 19    animation_param -> shape
Rule 20    shape -> circle_g
Rule 21    shape -> rect_g
Rule 22    shape -> polygon_g
Rule 23    circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
Rule 24    rect_g -> RECT { point_expression , size_expression , color_expression }
Rule 25    polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression }
Rule 26    points_expression -> point_expression
Rule 27    points_expression -> point_expression , points_expression
Rule 28    point_expression -> POINT ( expression , expression )
Rule 29    size_expression -> SIZE ( expression , expression )
Rule 30    color_expression -> COLOR ( expression , expression , expression )
Rule 31    expression -> expression ADD_OP expression
Rule 32    expression -> expression MUL_OP expression
Rule 33    expression -> NUMBER
Rule 34    expression -> IDENTIFIER
Rule 35    expression -> ( expression )
Rule 36    expression -> ADD_OP expression
Rule 37    assignation_size -> IDENTIFIER = size_expression
Rule 38    assignation_point -> IDENTIFIER = point_expression
Rule 39    assignation_color -> IDENTIFIER = color_expression
Rule 40    assignation_shape -> IDENTIFIER = shape
Rule 41    assignation_time -> IDENTIFIER = TIME ( expression )
Rule 42    assignation -> IDENTIFIER = expression
Rule 43    expression -> RANDOM ( expression )
Rule 44    expression -> RANDOM ( expression , expression )

Terminals, with rules where they appear

(                    : 14 16 17 17 23 25 28 29 30 35 41 43 44
)                    : 14 16 17 17 23 25 28 29 30 35 41 43 44
,                    : 14 14 16 17 17 23 23 24 24 25 25 27 28 29 30 30 44
;                    : 2 3
=                    : 37 38 39 40 41 42
ADD_OP               : 31 36
AROUND               : 17
CIRCLE               : 23
COLOR                : 30
FOR                  : 14
IDENTIFIER           : 18 34 37 38 39 40 41 42
MUL_OP               : 32
NUMBER               : 33
POINT                : 28
POLYGON              : 25
PRINT                : 13
RADIUS               : 23
RANDOM               : 43 44
RECT                 : 24
ROTATE               : 17
SIZE                 : 29
TIME                 : 41
TRANSLATE            : 16
error                : 
{                    : 14 23 24 25
}                    : 14 23 24 25

Nonterminals, with rules where they appear

animation            : 12
animation_param      : 16 17
assignation          : 4
assignation_color    : 6
assignation_point    : 7
assignation_shape    : 5
assignation_size     : 8
assignation_time     : 9
circle_g             : 20
color_expression     : 23 24 25 39
expression           : 13 14 14 14 17 23 28 28 29 29 30 30 30 31 31 32 32 35 36 41 42 43 44 44
point_expression     : 16 17 23 24 25 26 27 38
points_expression    : 25 27
polygon_g            : 22
program              : 0
rect_g               : 21
shape                : 11 19 40
size_expression      : 24 37
statement            : 2 3
structure            : 10
subprogram           : 1 3 14
translation          : 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . subprogram
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . assignation_size
    (9) statement -> . assignation_time
    (10) statement -> . structure
    (11) statement -> . shape
    (12) statement -> . animation
    (13) statement -> . PRINT expression
    (42) assignation -> . IDENTIFIER = expression
    (40) assignation_shape -> . IDENTIFIER = shape
    (39) assignation_color -> . IDENTIFIER = color_expression
    (38) assignation_point -> . IDENTIFIER = point_expression
    (37) assignation_size -> . IDENTIFIER = size_expression
    (41) assignation_time -> . IDENTIFIER = TIME ( expression )
    (14) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (15) animation -> . translation
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }
    (16) translation -> . TRANSLATE ( animation_param , point_expression )
    (17) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    PRINT           shift and go to state 12
    IDENTIFIER      shift and go to state 9
    FOR             shift and go to state 14
    CIRCLE          shift and go to state 15
    RECT            shift and go to state 4
    POLYGON         shift and go to state 5
    TRANSLATE       shift and go to state 20
    ROTATE          shift and go to state 8

    statement                      shift and go to state 1
    animation                      shift and go to state 2
    assignation                    shift and go to state 3
    shape                          shift and go to state 6
    assignation_color              shift and go to state 7
    assignation_shape              shift and go to state 10
    assignation_size               shift and go to state 11
    subprogram                     shift and go to state 22
    translation                    shift and go to state 19
    assignation_point              shift and go to state 16
    polygon_g                      shift and go to state 17
    structure                      shift and go to state 18
    rect_g                         shift and go to state 21
    program                        shift and go to state 24
    assignation_time               shift and go to state 23
    circle_g                       shift and go to state 13

state 1

    (2) subprogram -> statement . ;
    (3) subprogram -> statement . ; subprogram

    ;               shift and go to state 25


state 2

    (12) statement -> animation .

    ;               reduce using rule 12 (statement -> animation .)


state 3

    (4) statement -> assignation .

    ;               reduce using rule 4 (statement -> assignation .)


state 4

    (24) rect_g -> RECT . { point_expression , size_expression , color_expression }

    {               shift and go to state 26


state 5

    (25) polygon_g -> POLYGON . { point_expression , ( points_expression ) , color_expression }

    {               shift and go to state 27


state 6

    (11) statement -> shape .

    ;               reduce using rule 11 (statement -> shape .)


state 7

    (6) statement -> assignation_color .

    ;               reduce using rule 6 (statement -> assignation_color .)


state 8

    (17) translation -> ROTATE . ( animation_param , expression , AROUND ( point_expression ) )

    (               shift and go to state 28


state 9

    (42) assignation -> IDENTIFIER . = expression
    (40) assignation_shape -> IDENTIFIER . = shape
    (39) assignation_color -> IDENTIFIER . = color_expression
    (38) assignation_point -> IDENTIFIER . = point_expression
    (37) assignation_size -> IDENTIFIER . = size_expression
    (41) assignation_time -> IDENTIFIER . = TIME ( expression )

    =               shift and go to state 29


state 10

    (5) statement -> assignation_shape .

    ;               reduce using rule 5 (statement -> assignation_shape .)


state 11

    (8) statement -> assignation_size .

    ;               reduce using rule 8 (statement -> assignation_size .)


state 12

    (13) statement -> PRINT . expression
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 32

state 13

    (20) shape -> circle_g .

    ,               reduce using rule 20 (shape -> circle_g .)
    ;               reduce using rule 20 (shape -> circle_g .)


state 14

    (14) structure -> FOR . ( expression , expression , expression ) { subprogram }

    (               shift and go to state 36


state 15

    (23) circle_g -> CIRCLE . { point_expression , RADIUS ( expression ) , color_expression }

    {               shift and go to state 37


state 16

    (7) statement -> assignation_point .

    ;               reduce using rule 7 (statement -> assignation_point .)


state 17

    (22) shape -> polygon_g .

    ,               reduce using rule 22 (shape -> polygon_g .)
    ;               reduce using rule 22 (shape -> polygon_g .)


state 18

    (10) statement -> structure .

    ;               reduce using rule 10 (statement -> structure .)


state 19

    (15) animation -> translation .

    ;               reduce using rule 15 (animation -> translation .)


state 20

    (16) translation -> TRANSLATE . ( animation_param , point_expression )

    (               shift and go to state 38


state 21

    (21) shape -> rect_g .

    ,               reduce using rule 21 (shape -> rect_g .)
    ;               reduce using rule 21 (shape -> rect_g .)


state 22

    (1) program -> subprogram .

    $end            reduce using rule 1 (program -> subprogram .)


state 23

    (9) statement -> assignation_time .

    ;               reduce using rule 9 (statement -> assignation_time .)


state 24

    (0) S' -> program .



state 25

    (2) subprogram -> statement ; .
    (3) subprogram -> statement ; . subprogram
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . assignation_size
    (9) statement -> . assignation_time
    (10) statement -> . structure
    (11) statement -> . shape
    (12) statement -> . animation
    (13) statement -> . PRINT expression
    (42) assignation -> . IDENTIFIER = expression
    (40) assignation_shape -> . IDENTIFIER = shape
    (39) assignation_color -> . IDENTIFIER = color_expression
    (38) assignation_point -> . IDENTIFIER = point_expression
    (37) assignation_size -> . IDENTIFIER = size_expression
    (41) assignation_time -> . IDENTIFIER = TIME ( expression )
    (14) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (15) animation -> . translation
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }
    (16) translation -> . TRANSLATE ( animation_param , point_expression )
    (17) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    $end            reduce using rule 2 (subprogram -> statement ; .)
    }               reduce using rule 2 (subprogram -> statement ; .)
    PRINT           shift and go to state 12
    IDENTIFIER      shift and go to state 9
    FOR             shift and go to state 14
    CIRCLE          shift and go to state 15
    RECT            shift and go to state 4
    POLYGON         shift and go to state 5
    TRANSLATE       shift and go to state 20
    ROTATE          shift and go to state 8

    circle_g                       shift and go to state 13
    statement                      shift and go to state 1
    animation                      shift and go to state 2
    assignation                    shift and go to state 3
    shape                          shift and go to state 6
    translation                    shift and go to state 19
    assignation_color              shift and go to state 7
    polygon_g                      shift and go to state 17
    assignation_shape              shift and go to state 10
    structure                      shift and go to state 18
    rect_g                         shift and go to state 21
    assignation_size               shift and go to state 11
    subprogram                     shift and go to state 39
    assignation_time               shift and go to state 23
    assignation_point              shift and go to state 16

state 26

    (24) rect_g -> RECT { . point_expression , size_expression , color_expression }
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 40

    point_expression               shift and go to state 41

state 27

    (25) polygon_g -> POLYGON { . point_expression , ( points_expression ) , color_expression }
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 40

    point_expression               shift and go to state 42

state 28

    (17) translation -> ROTATE ( . animation_param , expression , AROUND ( point_expression ) )
    (18) animation_param -> . IDENTIFIER
    (19) animation_param -> . shape
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }

    IDENTIFIER      shift and go to state 44
    CIRCLE          shift and go to state 15
    RECT            shift and go to state 4
    POLYGON         shift and go to state 5

    polygon_g                      shift and go to state 17
    rect_g                         shift and go to state 21
    animation_param                shift and go to state 45
    shape                          shift and go to state 43
    circle_g                       shift and go to state 13

state 29

    (42) assignation -> IDENTIFIER = . expression
    (40) assignation_shape -> IDENTIFIER = . shape
    (39) assignation_color -> IDENTIFIER = . color_expression
    (38) assignation_point -> IDENTIFIER = . point_expression
    (37) assignation_size -> IDENTIFIER = . size_expression
    (41) assignation_time -> IDENTIFIER = . TIME ( expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (30) color_expression -> . COLOR ( expression , expression , expression )
    (28) point_expression -> . POINT ( expression , expression )
    (29) size_expression -> . SIZE ( expression , expression )
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }

    TIME            shift and go to state 52
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35
    COLOR           shift and go to state 53
    POINT           shift and go to state 40
    SIZE            shift and go to state 47
    CIRCLE          shift and go to state 15
    RECT            shift and go to state 4
    POLYGON         shift and go to state 5

    polygon_g                      shift and go to state 17
    color_expression               shift and go to state 49
    rect_g                         shift and go to state 21
    point_expression               shift and go to state 50
    size_expression                shift and go to state 51
    circle_g                       shift and go to state 13
    shape                          shift and go to state 48
    expression                     shift and go to state 46

state 30

    (33) expression -> NUMBER .

    ,               reduce using rule 33 (expression -> NUMBER .)
    ADD_OP          reduce using rule 33 (expression -> NUMBER .)
    MUL_OP          reduce using rule 33 (expression -> NUMBER .)
    )               reduce using rule 33 (expression -> NUMBER .)
    ;               reduce using rule 33 (expression -> NUMBER .)


state 31

    (34) expression -> IDENTIFIER .

    ,               reduce using rule 34 (expression -> IDENTIFIER .)
    ADD_OP          reduce using rule 34 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 34 (expression -> IDENTIFIER .)
    )               reduce using rule 34 (expression -> IDENTIFIER .)
    ;               reduce using rule 34 (expression -> IDENTIFIER .)


state 32

    (13) statement -> PRINT expression .
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ;               reduce using rule 13 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 33

    (35) expression -> ( . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 56

state 34

    (36) expression -> ADD_OP . expression
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 57

state 35

    (43) expression -> RANDOM . ( expression )
    (44) expression -> RANDOM . ( expression , expression )

    (               shift and go to state 58


state 36

    (14) structure -> FOR ( . expression , expression , expression ) { subprogram }
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 59

state 37

    (23) circle_g -> CIRCLE { . point_expression , RADIUS ( expression ) , color_expression }
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 40

    point_expression               shift and go to state 60

state 38

    (16) translation -> TRANSLATE ( . animation_param , point_expression )
    (18) animation_param -> . IDENTIFIER
    (19) animation_param -> . shape
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }

    IDENTIFIER      shift and go to state 44
    CIRCLE          shift and go to state 15
    RECT            shift and go to state 4
    POLYGON         shift and go to state 5

    polygon_g                      shift and go to state 17
    rect_g                         shift and go to state 21
    circle_g                       shift and go to state 13
    animation_param                shift and go to state 61
    shape                          shift and go to state 43

state 39

    (3) subprogram -> statement ; subprogram .

    $end            reduce using rule 3 (subprogram -> statement ; subprogram .)
    }               reduce using rule 3 (subprogram -> statement ; subprogram .)


state 40

    (28) point_expression -> POINT . ( expression , expression )

    (               shift and go to state 62


state 41

    (24) rect_g -> RECT { point_expression . , size_expression , color_expression }

    ,               shift and go to state 63


state 42

    (25) polygon_g -> POLYGON { point_expression . , ( points_expression ) , color_expression }

    ,               shift and go to state 64


state 43

    (19) animation_param -> shape .

    ,               reduce using rule 19 (animation_param -> shape .)


state 44

    (18) animation_param -> IDENTIFIER .

    ,               reduce using rule 18 (animation_param -> IDENTIFIER .)


state 45

    (17) translation -> ROTATE ( animation_param . , expression , AROUND ( point_expression ) )

    ,               shift and go to state 65


state 46

    (42) assignation -> IDENTIFIER = expression .
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ;               reduce using rule 42 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 47

    (29) size_expression -> SIZE . ( expression , expression )

    (               shift and go to state 66


state 48

    (40) assignation_shape -> IDENTIFIER = shape .

    ;               reduce using rule 40 (assignation_shape -> IDENTIFIER = shape .)


state 49

    (39) assignation_color -> IDENTIFIER = color_expression .

    ;               reduce using rule 39 (assignation_color -> IDENTIFIER = color_expression .)


state 50

    (38) assignation_point -> IDENTIFIER = point_expression .

    ;               reduce using rule 38 (assignation_point -> IDENTIFIER = point_expression .)


state 51

    (37) assignation_size -> IDENTIFIER = size_expression .

    ;               reduce using rule 37 (assignation_size -> IDENTIFIER = size_expression .)


state 52

    (41) assignation_time -> IDENTIFIER = TIME . ( expression )

    (               shift and go to state 67


state 53

    (30) color_expression -> COLOR . ( expression , expression , expression )

    (               shift and go to state 68


state 54

    (32) expression -> expression MUL_OP . expression
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 69

state 55

    (31) expression -> expression ADD_OP . expression
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 70

state 56

    (35) expression -> ( expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 71
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 57

    (36) expression -> ADD_OP expression .
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               reduce using rule 36 (expression -> ADD_OP expression .)
    ADD_OP          reduce using rule 36 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 36 (expression -> ADD_OP expression .)
    )               reduce using rule 36 (expression -> ADD_OP expression .)
    ;               reduce using rule 36 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 55 ]
  ! MUL_OP          [ shift and go to state 54 ]


state 58

    (43) expression -> RANDOM ( . expression )
    (44) expression -> RANDOM ( . expression , expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 72

state 59

    (14) structure -> FOR ( expression . , expression , expression ) { subprogram }
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 73
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 60

    (23) circle_g -> CIRCLE { point_expression . , RADIUS ( expression ) , color_expression }

    ,               shift and go to state 74


state 61

    (16) translation -> TRANSLATE ( animation_param . , point_expression )

    ,               shift and go to state 75


state 62

    (28) point_expression -> POINT ( . expression , expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 76

state 63

    (24) rect_g -> RECT { point_expression , . size_expression , color_expression }
    (29) size_expression -> . SIZE ( expression , expression )

    SIZE            shift and go to state 47

    size_expression                shift and go to state 77

state 64

    (25) polygon_g -> POLYGON { point_expression , . ( points_expression ) , color_expression }

    (               shift and go to state 78


state 65

    (17) translation -> ROTATE ( animation_param , . expression , AROUND ( point_expression ) )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 79

state 66

    (29) size_expression -> SIZE ( . expression , expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 80

state 67

    (41) assignation_time -> IDENTIFIER = TIME ( . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 81

state 68

    (30) color_expression -> COLOR ( . expression , expression , expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 82

state 69

    (32) expression -> expression MUL_OP expression .
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               reduce using rule 32 (expression -> expression MUL_OP expression .)
    ADD_OP          reduce using rule 32 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 32 (expression -> expression MUL_OP expression .)
    )               reduce using rule 32 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 32 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 55 ]
  ! MUL_OP          [ shift and go to state 54 ]


state 70

    (31) expression -> expression ADD_OP expression .
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               reduce using rule 31 (expression -> expression ADD_OP expression .)
    ADD_OP          reduce using rule 31 (expression -> expression ADD_OP expression .)
    )               reduce using rule 31 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 31 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 54

  ! MUL_OP          [ reduce using rule 31 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 55 ]


state 71

    (35) expression -> ( expression ) .

    ,               reduce using rule 35 (expression -> ( expression ) .)
    ADD_OP          reduce using rule 35 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 35 (expression -> ( expression ) .)
    )               reduce using rule 35 (expression -> ( expression ) .)
    ;               reduce using rule 35 (expression -> ( expression ) .)


state 72

    (43) expression -> RANDOM ( expression . )
    (44) expression -> RANDOM ( expression . , expression )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 84
    ,               shift and go to state 83
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 73

    (14) structure -> FOR ( expression , . expression , expression ) { subprogram }
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 85

state 74

    (23) circle_g -> CIRCLE { point_expression , . RADIUS ( expression ) , color_expression }

    RADIUS          shift and go to state 86


state 75

    (16) translation -> TRANSLATE ( animation_param , . point_expression )
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 40

    point_expression               shift and go to state 87

state 76

    (28) point_expression -> POINT ( expression . , expression )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 88
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 77

    (24) rect_g -> RECT { point_expression , size_expression . , color_expression }

    ,               shift and go to state 89


state 78

    (25) polygon_g -> POLYGON { point_expression , ( . points_expression ) , color_expression }
    (26) points_expression -> . point_expression
    (27) points_expression -> . point_expression , points_expression
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 40

    point_expression               shift and go to state 91
    points_expression              shift and go to state 90

state 79

    (17) translation -> ROTATE ( animation_param , expression . , AROUND ( point_expression ) )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 92
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 80

    (29) size_expression -> SIZE ( expression . , expression )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 93
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 81

    (41) assignation_time -> IDENTIFIER = TIME ( expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 94
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 82

    (30) color_expression -> COLOR ( expression . , expression , expression )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 95
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 83

    (44) expression -> RANDOM ( expression , . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 96

state 84

    (43) expression -> RANDOM ( expression ) .

    ,               reduce using rule 43 (expression -> RANDOM ( expression ) .)
    ADD_OP          reduce using rule 43 (expression -> RANDOM ( expression ) .)
    MUL_OP          reduce using rule 43 (expression -> RANDOM ( expression ) .)
    )               reduce using rule 43 (expression -> RANDOM ( expression ) .)
    ;               reduce using rule 43 (expression -> RANDOM ( expression ) .)


state 85

    (14) structure -> FOR ( expression , expression . , expression ) { subprogram }
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 97
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 86

    (23) circle_g -> CIRCLE { point_expression , RADIUS . ( expression ) , color_expression }

    (               shift and go to state 98


state 87

    (16) translation -> TRANSLATE ( animation_param , point_expression . )

    )               shift and go to state 99


state 88

    (28) point_expression -> POINT ( expression , . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 100

state 89

    (24) rect_g -> RECT { point_expression , size_expression , . color_expression }
    (30) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 53

    color_expression               shift and go to state 101

state 90

    (25) polygon_g -> POLYGON { point_expression , ( points_expression . ) , color_expression }

    )               shift and go to state 102


state 91

    (26) points_expression -> point_expression .
    (27) points_expression -> point_expression . , points_expression

    )               reduce using rule 26 (points_expression -> point_expression .)
    ,               shift and go to state 103


state 92

    (17) translation -> ROTATE ( animation_param , expression , . AROUND ( point_expression ) )

    AROUND          shift and go to state 104


state 93

    (29) size_expression -> SIZE ( expression , . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 105

state 94

    (41) assignation_time -> IDENTIFIER = TIME ( expression ) .

    ;               reduce using rule 41 (assignation_time -> IDENTIFIER = TIME ( expression ) .)


state 95

    (30) color_expression -> COLOR ( expression , . expression , expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 106

state 96

    (44) expression -> RANDOM ( expression , expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 107
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 97

    (14) structure -> FOR ( expression , expression , . expression ) { subprogram }
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 108

state 98

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( . expression ) , color_expression }
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 109

state 99

    (16) translation -> TRANSLATE ( animation_param , point_expression ) .

    ;               reduce using rule 16 (translation -> TRANSLATE ( animation_param , point_expression ) .)


state 100

    (28) point_expression -> POINT ( expression , expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 110
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 101

    (24) rect_g -> RECT { point_expression , size_expression , color_expression . }

    }               shift and go to state 111


state 102

    (25) polygon_g -> POLYGON { point_expression , ( points_expression ) . , color_expression }

    ,               shift and go to state 112


state 103

    (27) points_expression -> point_expression , . points_expression
    (26) points_expression -> . point_expression
    (27) points_expression -> . point_expression , points_expression
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 40

    point_expression               shift and go to state 91
    points_expression              shift and go to state 113

state 104

    (17) translation -> ROTATE ( animation_param , expression , AROUND . ( point_expression ) )

    (               shift and go to state 114


state 105

    (29) size_expression -> SIZE ( expression , expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 115
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 106

    (30) color_expression -> COLOR ( expression , expression . , expression )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 116
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 107

    (44) expression -> RANDOM ( expression , expression ) .

    ,               reduce using rule 44 (expression -> RANDOM ( expression , expression ) .)
    ADD_OP          reduce using rule 44 (expression -> RANDOM ( expression , expression ) .)
    MUL_OP          reduce using rule 44 (expression -> RANDOM ( expression , expression ) .)
    )               reduce using rule 44 (expression -> RANDOM ( expression , expression ) .)
    ;               reduce using rule 44 (expression -> RANDOM ( expression , expression ) .)


state 108

    (14) structure -> FOR ( expression , expression , expression . ) { subprogram }
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 117
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 109

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( expression . ) , color_expression }
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 118
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 110

    (28) point_expression -> POINT ( expression , expression ) .

    ,               reduce using rule 28 (point_expression -> POINT ( expression , expression ) .)
    )               reduce using rule 28 (point_expression -> POINT ( expression , expression ) .)
    ;               reduce using rule 28 (point_expression -> POINT ( expression , expression ) .)


state 111

    (24) rect_g -> RECT { point_expression , size_expression , color_expression } .

    ;               reduce using rule 24 (rect_g -> RECT { point_expression , size_expression , color_expression } .)
    ,               reduce using rule 24 (rect_g -> RECT { point_expression , size_expression , color_expression } .)


state 112

    (25) polygon_g -> POLYGON { point_expression , ( points_expression ) , . color_expression }
    (30) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 53

    color_expression               shift and go to state 119

state 113

    (27) points_expression -> point_expression , points_expression .

    )               reduce using rule 27 (points_expression -> point_expression , points_expression .)


state 114

    (17) translation -> ROTATE ( animation_param , expression , AROUND ( . point_expression ) )
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 40

    point_expression               shift and go to state 120

state 115

    (29) size_expression -> SIZE ( expression , expression ) .

    ,               reduce using rule 29 (size_expression -> SIZE ( expression , expression ) .)
    ;               reduce using rule 29 (size_expression -> SIZE ( expression , expression ) .)


state 116

    (30) color_expression -> COLOR ( expression , expression , . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    (               shift and go to state 33
    ADD_OP          shift and go to state 34
    RANDOM          shift and go to state 35

    expression                     shift and go to state 121

state 117

    (14) structure -> FOR ( expression , expression , expression ) . { subprogram }

    {               shift and go to state 122


state 118

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) . , color_expression }

    ,               shift and go to state 123


state 119

    (25) polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression . }

    }               shift and go to state 124


state 120

    (17) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression . ) )

    )               shift and go to state 125


state 121

    (30) color_expression -> COLOR ( expression , expression , expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 126
    ADD_OP          shift and go to state 55
    MUL_OP          shift and go to state 54


state 122

    (14) structure -> FOR ( expression , expression , expression ) { . subprogram }
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . assignation_size
    (9) statement -> . assignation_time
    (10) statement -> . structure
    (11) statement -> . shape
    (12) statement -> . animation
    (13) statement -> . PRINT expression
    (42) assignation -> . IDENTIFIER = expression
    (40) assignation_shape -> . IDENTIFIER = shape
    (39) assignation_color -> . IDENTIFIER = color_expression
    (38) assignation_point -> . IDENTIFIER = point_expression
    (37) assignation_size -> . IDENTIFIER = size_expression
    (41) assignation_time -> . IDENTIFIER = TIME ( expression )
    (14) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (15) animation -> . translation
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }
    (16) translation -> . TRANSLATE ( animation_param , point_expression )
    (17) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    PRINT           shift and go to state 12
    IDENTIFIER      shift and go to state 9
    FOR             shift and go to state 14
    CIRCLE          shift and go to state 15
    RECT            shift and go to state 4
    POLYGON         shift and go to state 5
    TRANSLATE       shift and go to state 20
    ROTATE          shift and go to state 8

    circle_g                       shift and go to state 13
    statement                      shift and go to state 1
    animation                      shift and go to state 2
    assignation                    shift and go to state 3
    shape                          shift and go to state 6
    translation                    shift and go to state 19
    assignation_color              shift and go to state 7
    polygon_g                      shift and go to state 17
    assignation_shape              shift and go to state 10
    structure                      shift and go to state 18
    rect_g                         shift and go to state 21
    assignation_size               shift and go to state 11
    subprogram                     shift and go to state 127
    assignation_time               shift and go to state 23
    assignation_point              shift and go to state 16

state 123

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , . color_expression }
    (30) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 53

    color_expression               shift and go to state 128

state 124

    (25) polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression } .

    ,               reduce using rule 25 (polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression } .)
    ;               reduce using rule 25 (polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression } .)


state 125

    (17) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) . )

    )               shift and go to state 129


state 126

    (30) color_expression -> COLOR ( expression , expression , expression ) .

    }               reduce using rule 30 (color_expression -> COLOR ( expression , expression , expression ) .)
    ;               reduce using rule 30 (color_expression -> COLOR ( expression , expression , expression ) .)


state 127

    (14) structure -> FOR ( expression , expression , expression ) { subprogram . }

    }               shift and go to state 130


state 128

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression . }

    }               shift and go to state 131


state 129

    (17) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) ) .

    ;               reduce using rule 17 (translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) ) .)


state 130

    (14) structure -> FOR ( expression , expression , expression ) { subprogram } .

    ;               reduce using rule 14 (structure -> FOR ( expression , expression , expression ) { subprogram } .)


state 131

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .

    ;               reduce using rule 23 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)
    ,               reduce using rule 23 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)

