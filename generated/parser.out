Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> subprogram
Rule 2     subprogram -> statement ;
Rule 3     subprogram -> statement ; subprogram
Rule 4     statement -> assignation
Rule 5     statement -> assignation_shape
Rule 6     statement -> assignation_color
Rule 7     statement -> assignation_point
Rule 8     statement -> assignation_size
Rule 9     statement -> assignation_time
Rule 10    statement -> structure
Rule 11    statement -> shape
Rule 12    statement -> animation
Rule 13    statement -> PRINT expression
Rule 14    structure -> FOR ( expression , expression , expression ) { subprogram }
Rule 15    animation -> translation
Rule 16    translation -> TRANSLATE ( animation_param , point_expression )
Rule 17    translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) )
Rule 18    animation_param -> IDENTIFIER
Rule 19    animation_param -> shape
Rule 20    shape -> circle_g
Rule 21    shape -> rect_g
Rule 22    shape -> polygon_g
Rule 23    circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
Rule 24    rect_g -> RECT { point_expression , size_expression , color_expression }
Rule 25    polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression }
Rule 26    points_expression -> point_expression
Rule 27    points_expression -> point_expression , points_expression
Rule 28    point_expression -> POINT ( expression , expression )
Rule 29    size_expression -> SIZE ( expression , expression )
Rule 30    color_expression -> COLOR ( expression , expression , expression )
Rule 31    expression -> expression ADD_OP expression
Rule 32    expression -> expression MUL_OP expression
Rule 33    expression -> NUMBER
Rule 34    expression -> IDENTIFIER
Rule 35    expression -> ( expression )
Rule 36    expression -> ADD_OP expression
Rule 37    assignation_size -> IDENTIFIER = size_expression
Rule 38    assignation_point -> IDENTIFIER = point_expression
Rule 39    assignation_color -> IDENTIFIER = color_expression
Rule 40    assignation_shape -> IDENTIFIER = shape
Rule 41    assignation_time -> IDENTIFIER = TIME ( expression )
Rule 42    assignation -> IDENTIFIER = expression
Rule 43    expression -> RANDOM ( expression )
Rule 44    expression -> RANDOM ( expression , expression )

Terminals, with rules where they appear

(                    : 14 16 17 17 23 25 28 29 30 35 41 43 44
)                    : 14 16 17 17 23 25 28 29 30 35 41 43 44
,                    : 14 14 16 17 17 23 23 24 24 25 25 27 28 29 30 30 44
;                    : 2 3
=                    : 37 38 39 40 41 42
ADD_OP               : 31 36
AROUND               : 17
CIRCLE               : 23
COLOR                : 30
FOR                  : 14
IDENTIFIER           : 18 34 37 38 39 40 41 42
MUL_OP               : 32
NUMBER               : 33
POINT                : 28
POLYGON              : 25
PRINT                : 13
RADIUS               : 23
RANDOM               : 43 44
RECT                 : 24
ROTATE               : 17
SIZE                 : 29
TIME                 : 41
TRANSLATE            : 16
error                : 
{                    : 14 23 24 25
}                    : 14 23 24 25

Nonterminals, with rules where they appear

animation            : 12
animation_param      : 16 17
assignation          : 4
assignation_color    : 6
assignation_point    : 7
assignation_shape    : 5
assignation_size     : 8
assignation_time     : 9
circle_g             : 20
color_expression     : 23 24 25 39
expression           : 13 14 14 14 17 23 28 28 29 29 30 30 30 31 31 32 32 35 36 41 42 43 44 44
point_expression     : 16 17 23 24 25 26 27 38
points_expression    : 25 27
polygon_g            : 22
program              : 0
rect_g               : 21
shape                : 11 19 40
size_expression      : 24 37
statement            : 2 3
structure            : 10
subprogram           : 1 3 14
translation          : 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . subprogram
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . assignation_size
    (9) statement -> . assignation_time
    (10) statement -> . structure
    (11) statement -> . shape
    (12) statement -> . animation
    (13) statement -> . PRINT expression
    (42) assignation -> . IDENTIFIER = expression
    (40) assignation_shape -> . IDENTIFIER = shape
    (39) assignation_color -> . IDENTIFIER = color_expression
    (38) assignation_point -> . IDENTIFIER = point_expression
    (37) assignation_size -> . IDENTIFIER = size_expression
    (41) assignation_time -> . IDENTIFIER = TIME ( expression )
    (14) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (15) animation -> . translation
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }
    (16) translation -> . TRANSLATE ( animation_param , point_expression )
    (17) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    PRINT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    FOR             shift and go to state 15
    CIRCLE          shift and go to state 20
    RECT            shift and go to state 21
    POLYGON         shift and go to state 22
    TRANSLATE       shift and go to state 23
    ROTATE          shift and go to state 24

    program                        shift and go to state 1
    subprogram                     shift and go to state 2
    statement                      shift and go to state 3
    assignation                    shift and go to state 4
    assignation_shape              shift and go to state 5
    assignation_color              shift and go to state 6
    assignation_point              shift and go to state 7
    assignation_size               shift and go to state 8
    assignation_time               shift and go to state 9
    structure                      shift and go to state 10
    shape                          shift and go to state 11
    animation                      shift and go to state 12
    circle_g                       shift and go to state 16
    rect_g                         shift and go to state 17
    polygon_g                      shift and go to state 18
    translation                    shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> subprogram .

    $end            reduce using rule 1 (program -> subprogram .)


state 3

    (2) subprogram -> statement . ;
    (3) subprogram -> statement . ; subprogram

    ;               shift and go to state 25


state 4

    (4) statement -> assignation .

    ;               reduce using rule 4 (statement -> assignation .)


state 5

    (5) statement -> assignation_shape .

    ;               reduce using rule 5 (statement -> assignation_shape .)


state 6

    (6) statement -> assignation_color .

    ;               reduce using rule 6 (statement -> assignation_color .)


state 7

    (7) statement -> assignation_point .

    ;               reduce using rule 7 (statement -> assignation_point .)


state 8

    (8) statement -> assignation_size .

    ;               reduce using rule 8 (statement -> assignation_size .)


state 9

    (9) statement -> assignation_time .

    ;               reduce using rule 9 (statement -> assignation_time .)


state 10

    (10) statement -> structure .

    ;               reduce using rule 10 (statement -> structure .)


state 11

    (11) statement -> shape .

    ;               reduce using rule 11 (statement -> shape .)


state 12

    (12) statement -> animation .

    ;               reduce using rule 12 (statement -> animation .)


state 13

    (13) statement -> PRINT . expression
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 26

state 14

    (42) assignation -> IDENTIFIER . = expression
    (40) assignation_shape -> IDENTIFIER . = shape
    (39) assignation_color -> IDENTIFIER . = color_expression
    (38) assignation_point -> IDENTIFIER . = point_expression
    (37) assignation_size -> IDENTIFIER . = size_expression
    (41) assignation_time -> IDENTIFIER . = TIME ( expression )

    =               shift and go to state 32


state 15

    (14) structure -> FOR . ( expression , expression , expression ) { subprogram }

    (               shift and go to state 33


state 16

    (20) shape -> circle_g .

    ;               reduce using rule 20 (shape -> circle_g .)
    ,               reduce using rule 20 (shape -> circle_g .)


state 17

    (21) shape -> rect_g .

    ;               reduce using rule 21 (shape -> rect_g .)
    ,               reduce using rule 21 (shape -> rect_g .)


state 18

    (22) shape -> polygon_g .

    ;               reduce using rule 22 (shape -> polygon_g .)
    ,               reduce using rule 22 (shape -> polygon_g .)


state 19

    (15) animation -> translation .

    ;               reduce using rule 15 (animation -> translation .)


state 20

    (23) circle_g -> CIRCLE . { point_expression , RADIUS ( expression ) , color_expression }

    {               shift and go to state 34


state 21

    (24) rect_g -> RECT . { point_expression , size_expression , color_expression }

    {               shift and go to state 35


state 22

    (25) polygon_g -> POLYGON . { point_expression , ( points_expression ) , color_expression }

    {               shift and go to state 36


state 23

    (16) translation -> TRANSLATE . ( animation_param , point_expression )

    (               shift and go to state 37


state 24

    (17) translation -> ROTATE . ( animation_param , expression , AROUND ( point_expression ) )

    (               shift and go to state 38


state 25

    (2) subprogram -> statement ; .
    (3) subprogram -> statement ; . subprogram
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . assignation_size
    (9) statement -> . assignation_time
    (10) statement -> . structure
    (11) statement -> . shape
    (12) statement -> . animation
    (13) statement -> . PRINT expression
    (42) assignation -> . IDENTIFIER = expression
    (40) assignation_shape -> . IDENTIFIER = shape
    (39) assignation_color -> . IDENTIFIER = color_expression
    (38) assignation_point -> . IDENTIFIER = point_expression
    (37) assignation_size -> . IDENTIFIER = size_expression
    (41) assignation_time -> . IDENTIFIER = TIME ( expression )
    (14) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (15) animation -> . translation
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }
    (16) translation -> . TRANSLATE ( animation_param , point_expression )
    (17) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    $end            reduce using rule 2 (subprogram -> statement ; .)
    }               reduce using rule 2 (subprogram -> statement ; .)
    PRINT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    FOR             shift and go to state 15
    CIRCLE          shift and go to state 20
    RECT            shift and go to state 21
    POLYGON         shift and go to state 22
    TRANSLATE       shift and go to state 23
    ROTATE          shift and go to state 24

    statement                      shift and go to state 3
    subprogram                     shift and go to state 39
    assignation                    shift and go to state 4
    assignation_shape              shift and go to state 5
    assignation_color              shift and go to state 6
    assignation_point              shift and go to state 7
    assignation_size               shift and go to state 8
    assignation_time               shift and go to state 9
    structure                      shift and go to state 10
    shape                          shift and go to state 11
    animation                      shift and go to state 12
    circle_g                       shift and go to state 16
    rect_g                         shift and go to state 17
    polygon_g                      shift and go to state 18
    translation                    shift and go to state 19

state 26

    (13) statement -> PRINT expression .
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ;               reduce using rule 13 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 27

    (36) expression -> ADD_OP . expression
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 42

state 28

    (33) expression -> NUMBER .

    ADD_OP          reduce using rule 33 (expression -> NUMBER .)
    MUL_OP          reduce using rule 33 (expression -> NUMBER .)
    ;               reduce using rule 33 (expression -> NUMBER .)
    )               reduce using rule 33 (expression -> NUMBER .)
    ,               reduce using rule 33 (expression -> NUMBER .)


state 29

    (34) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 34 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 34 (expression -> IDENTIFIER .)
    ;               reduce using rule 34 (expression -> IDENTIFIER .)
    )               reduce using rule 34 (expression -> IDENTIFIER .)
    ,               reduce using rule 34 (expression -> IDENTIFIER .)


state 30

    (35) expression -> ( . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 43

state 31

    (43) expression -> RANDOM . ( expression )
    (44) expression -> RANDOM . ( expression , expression )

    (               shift and go to state 44


state 32

    (42) assignation -> IDENTIFIER = . expression
    (40) assignation_shape -> IDENTIFIER = . shape
    (39) assignation_color -> IDENTIFIER = . color_expression
    (38) assignation_point -> IDENTIFIER = . point_expression
    (37) assignation_size -> IDENTIFIER = . size_expression
    (41) assignation_time -> IDENTIFIER = . TIME ( expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (30) color_expression -> . COLOR ( expression , expression , expression )
    (28) point_expression -> . POINT ( expression , expression )
    (29) size_expression -> . SIZE ( expression , expression )
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }

    TIME            shift and go to state 50
    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31
    COLOR           shift and go to state 51
    POINT           shift and go to state 52
    SIZE            shift and go to state 53
    CIRCLE          shift and go to state 20
    RECT            shift and go to state 21
    POLYGON         shift and go to state 22

    expression                     shift and go to state 45
    shape                          shift and go to state 46
    color_expression               shift and go to state 47
    point_expression               shift and go to state 48
    size_expression                shift and go to state 49
    circle_g                       shift and go to state 16
    rect_g                         shift and go to state 17
    polygon_g                      shift and go to state 18

state 33

    (14) structure -> FOR ( . expression , expression , expression ) { subprogram }
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 54

state 34

    (23) circle_g -> CIRCLE { . point_expression , RADIUS ( expression ) , color_expression }
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 52

    point_expression               shift and go to state 55

state 35

    (24) rect_g -> RECT { . point_expression , size_expression , color_expression }
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 52

    point_expression               shift and go to state 56

state 36

    (25) polygon_g -> POLYGON { . point_expression , ( points_expression ) , color_expression }
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 52

    point_expression               shift and go to state 57

state 37

    (16) translation -> TRANSLATE ( . animation_param , point_expression )
    (18) animation_param -> . IDENTIFIER
    (19) animation_param -> . shape
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }

    IDENTIFIER      shift and go to state 59
    CIRCLE          shift and go to state 20
    RECT            shift and go to state 21
    POLYGON         shift and go to state 22

    animation_param                shift and go to state 58
    shape                          shift and go to state 60
    circle_g                       shift and go to state 16
    rect_g                         shift and go to state 17
    polygon_g                      shift and go to state 18

state 38

    (17) translation -> ROTATE ( . animation_param , expression , AROUND ( point_expression ) )
    (18) animation_param -> . IDENTIFIER
    (19) animation_param -> . shape
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }

    IDENTIFIER      shift and go to state 59
    CIRCLE          shift and go to state 20
    RECT            shift and go to state 21
    POLYGON         shift and go to state 22

    animation_param                shift and go to state 61
    shape                          shift and go to state 60
    circle_g                       shift and go to state 16
    rect_g                         shift and go to state 17
    polygon_g                      shift and go to state 18

state 39

    (3) subprogram -> statement ; subprogram .

    $end            reduce using rule 3 (subprogram -> statement ; subprogram .)
    }               reduce using rule 3 (subprogram -> statement ; subprogram .)


state 40

    (31) expression -> expression ADD_OP . expression
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 62

state 41

    (32) expression -> expression MUL_OP . expression
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 63

state 42

    (36) expression -> ADD_OP expression .
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 36 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 36 (expression -> ADD_OP expression .)
    ;               reduce using rule 36 (expression -> ADD_OP expression .)
    )               reduce using rule 36 (expression -> ADD_OP expression .)
    ,               reduce using rule 36 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 40 ]
  ! MUL_OP          [ shift and go to state 41 ]


state 43

    (35) expression -> ( expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 64
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 44

    (43) expression -> RANDOM ( . expression )
    (44) expression -> RANDOM ( . expression , expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 65

state 45

    (42) assignation -> IDENTIFIER = expression .
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ;               reduce using rule 42 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 46

    (40) assignation_shape -> IDENTIFIER = shape .

    ;               reduce using rule 40 (assignation_shape -> IDENTIFIER = shape .)


state 47

    (39) assignation_color -> IDENTIFIER = color_expression .

    ;               reduce using rule 39 (assignation_color -> IDENTIFIER = color_expression .)


state 48

    (38) assignation_point -> IDENTIFIER = point_expression .

    ;               reduce using rule 38 (assignation_point -> IDENTIFIER = point_expression .)


state 49

    (37) assignation_size -> IDENTIFIER = size_expression .

    ;               reduce using rule 37 (assignation_size -> IDENTIFIER = size_expression .)


state 50

    (41) assignation_time -> IDENTIFIER = TIME . ( expression )

    (               shift and go to state 66


state 51

    (30) color_expression -> COLOR . ( expression , expression , expression )

    (               shift and go to state 67


state 52

    (28) point_expression -> POINT . ( expression , expression )

    (               shift and go to state 68


state 53

    (29) size_expression -> SIZE . ( expression , expression )

    (               shift and go to state 69


state 54

    (14) structure -> FOR ( expression . , expression , expression ) { subprogram }
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 70
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 55

    (23) circle_g -> CIRCLE { point_expression . , RADIUS ( expression ) , color_expression }

    ,               shift and go to state 71


state 56

    (24) rect_g -> RECT { point_expression . , size_expression , color_expression }

    ,               shift and go to state 72


state 57

    (25) polygon_g -> POLYGON { point_expression . , ( points_expression ) , color_expression }

    ,               shift and go to state 73


state 58

    (16) translation -> TRANSLATE ( animation_param . , point_expression )

    ,               shift and go to state 74


state 59

    (18) animation_param -> IDENTIFIER .

    ,               reduce using rule 18 (animation_param -> IDENTIFIER .)


state 60

    (19) animation_param -> shape .

    ,               reduce using rule 19 (animation_param -> shape .)


state 61

    (17) translation -> ROTATE ( animation_param . , expression , AROUND ( point_expression ) )

    ,               shift and go to state 75


state 62

    (31) expression -> expression ADD_OP expression .
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 31 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 31 (expression -> expression ADD_OP expression .)
    )               reduce using rule 31 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 31 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 41

  ! MUL_OP          [ reduce using rule 31 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 40 ]


state 63

    (32) expression -> expression MUL_OP expression .
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 32 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 32 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 32 (expression -> expression MUL_OP expression .)
    )               reduce using rule 32 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 32 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 40 ]
  ! MUL_OP          [ shift and go to state 41 ]


state 64

    (35) expression -> ( expression ) .

    ADD_OP          reduce using rule 35 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 35 (expression -> ( expression ) .)
    ;               reduce using rule 35 (expression -> ( expression ) .)
    )               reduce using rule 35 (expression -> ( expression ) .)
    ,               reduce using rule 35 (expression -> ( expression ) .)


state 65

    (43) expression -> RANDOM ( expression . )
    (44) expression -> RANDOM ( expression . , expression )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 76
    ,               shift and go to state 77
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 66

    (41) assignation_time -> IDENTIFIER = TIME ( . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 78

state 67

    (30) color_expression -> COLOR ( . expression , expression , expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 79

state 68

    (28) point_expression -> POINT ( . expression , expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 80

state 69

    (29) size_expression -> SIZE ( . expression , expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 81

state 70

    (14) structure -> FOR ( expression , . expression , expression ) { subprogram }
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 82

state 71

    (23) circle_g -> CIRCLE { point_expression , . RADIUS ( expression ) , color_expression }

    RADIUS          shift and go to state 83


state 72

    (24) rect_g -> RECT { point_expression , . size_expression , color_expression }
    (29) size_expression -> . SIZE ( expression , expression )

    SIZE            shift and go to state 53

    size_expression                shift and go to state 84

state 73

    (25) polygon_g -> POLYGON { point_expression , . ( points_expression ) , color_expression }

    (               shift and go to state 85


state 74

    (16) translation -> TRANSLATE ( animation_param , . point_expression )
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 52

    point_expression               shift and go to state 86

state 75

    (17) translation -> ROTATE ( animation_param , . expression , AROUND ( point_expression ) )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 87

state 76

    (43) expression -> RANDOM ( expression ) .

    ADD_OP          reduce using rule 43 (expression -> RANDOM ( expression ) .)
    MUL_OP          reduce using rule 43 (expression -> RANDOM ( expression ) .)
    ;               reduce using rule 43 (expression -> RANDOM ( expression ) .)
    )               reduce using rule 43 (expression -> RANDOM ( expression ) .)
    ,               reduce using rule 43 (expression -> RANDOM ( expression ) .)


state 77

    (44) expression -> RANDOM ( expression , . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 88

state 78

    (41) assignation_time -> IDENTIFIER = TIME ( expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 89
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 79

    (30) color_expression -> COLOR ( expression . , expression , expression )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 90
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 80

    (28) point_expression -> POINT ( expression . , expression )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 91
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 81

    (29) size_expression -> SIZE ( expression . , expression )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 92
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 82

    (14) structure -> FOR ( expression , expression . , expression ) { subprogram }
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 93
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 83

    (23) circle_g -> CIRCLE { point_expression , RADIUS . ( expression ) , color_expression }

    (               shift and go to state 94


state 84

    (24) rect_g -> RECT { point_expression , size_expression . , color_expression }

    ,               shift and go to state 95


state 85

    (25) polygon_g -> POLYGON { point_expression , ( . points_expression ) , color_expression }
    (26) points_expression -> . point_expression
    (27) points_expression -> . point_expression , points_expression
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 52

    point_expression               shift and go to state 96
    points_expression              shift and go to state 97

state 86

    (16) translation -> TRANSLATE ( animation_param , point_expression . )

    )               shift and go to state 98


state 87

    (17) translation -> ROTATE ( animation_param , expression . , AROUND ( point_expression ) )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 99
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 88

    (44) expression -> RANDOM ( expression , expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 100
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 89

    (41) assignation_time -> IDENTIFIER = TIME ( expression ) .

    ;               reduce using rule 41 (assignation_time -> IDENTIFIER = TIME ( expression ) .)


state 90

    (30) color_expression -> COLOR ( expression , . expression , expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 101

state 91

    (28) point_expression -> POINT ( expression , . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 102

state 92

    (29) size_expression -> SIZE ( expression , . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 103

state 93

    (14) structure -> FOR ( expression , expression , . expression ) { subprogram }
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 104

state 94

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( . expression ) , color_expression }
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 105

state 95

    (24) rect_g -> RECT { point_expression , size_expression , . color_expression }
    (30) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 51

    color_expression               shift and go to state 106

state 96

    (26) points_expression -> point_expression .
    (27) points_expression -> point_expression . , points_expression

    )               reduce using rule 26 (points_expression -> point_expression .)
    ,               shift and go to state 107


state 97

    (25) polygon_g -> POLYGON { point_expression , ( points_expression . ) , color_expression }

    )               shift and go to state 108


state 98

    (16) translation -> TRANSLATE ( animation_param , point_expression ) .

    ;               reduce using rule 16 (translation -> TRANSLATE ( animation_param , point_expression ) .)


state 99

    (17) translation -> ROTATE ( animation_param , expression , . AROUND ( point_expression ) )

    AROUND          shift and go to state 109


state 100

    (44) expression -> RANDOM ( expression , expression ) .

    ADD_OP          reduce using rule 44 (expression -> RANDOM ( expression , expression ) .)
    MUL_OP          reduce using rule 44 (expression -> RANDOM ( expression , expression ) .)
    ;               reduce using rule 44 (expression -> RANDOM ( expression , expression ) .)
    )               reduce using rule 44 (expression -> RANDOM ( expression , expression ) .)
    ,               reduce using rule 44 (expression -> RANDOM ( expression , expression ) .)


state 101

    (30) color_expression -> COLOR ( expression , expression . , expression )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    ,               shift and go to state 110
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 102

    (28) point_expression -> POINT ( expression , expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 111
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 103

    (29) size_expression -> SIZE ( expression , expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 112
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 104

    (14) structure -> FOR ( expression , expression , expression . ) { subprogram }
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 113
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 105

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( expression . ) , color_expression }
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 114
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 106

    (24) rect_g -> RECT { point_expression , size_expression , color_expression . }

    }               shift and go to state 115


state 107

    (27) points_expression -> point_expression , . points_expression
    (26) points_expression -> . point_expression
    (27) points_expression -> . point_expression , points_expression
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 52

    point_expression               shift and go to state 96
    points_expression              shift and go to state 116

state 108

    (25) polygon_g -> POLYGON { point_expression , ( points_expression ) . , color_expression }

    ,               shift and go to state 117


state 109

    (17) translation -> ROTATE ( animation_param , expression , AROUND . ( point_expression ) )

    (               shift and go to state 118


state 110

    (30) color_expression -> COLOR ( expression , expression , . expression )
    (31) expression -> . expression ADD_OP expression
    (32) expression -> . expression MUL_OP expression
    (33) expression -> . NUMBER
    (34) expression -> . IDENTIFIER
    (35) expression -> . ( expression )
    (36) expression -> . ADD_OP expression
    (43) expression -> . RANDOM ( expression )
    (44) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 29
    (               shift and go to state 30
    ADD_OP          shift and go to state 27
    RANDOM          shift and go to state 31

    expression                     shift and go to state 119

state 111

    (28) point_expression -> POINT ( expression , expression ) .

    ;               reduce using rule 28 (point_expression -> POINT ( expression , expression ) .)
    ,               reduce using rule 28 (point_expression -> POINT ( expression , expression ) .)
    )               reduce using rule 28 (point_expression -> POINT ( expression , expression ) .)


state 112

    (29) size_expression -> SIZE ( expression , expression ) .

    ;               reduce using rule 29 (size_expression -> SIZE ( expression , expression ) .)
    ,               reduce using rule 29 (size_expression -> SIZE ( expression , expression ) .)


state 113

    (14) structure -> FOR ( expression , expression , expression ) . { subprogram }

    {               shift and go to state 120


state 114

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) . , color_expression }

    ,               shift and go to state 121


state 115

    (24) rect_g -> RECT { point_expression , size_expression , color_expression } .

    ;               reduce using rule 24 (rect_g -> RECT { point_expression , size_expression , color_expression } .)
    ,               reduce using rule 24 (rect_g -> RECT { point_expression , size_expression , color_expression } .)


state 116

    (27) points_expression -> point_expression , points_expression .

    )               reduce using rule 27 (points_expression -> point_expression , points_expression .)


state 117

    (25) polygon_g -> POLYGON { point_expression , ( points_expression ) , . color_expression }
    (30) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 51

    color_expression               shift and go to state 122

state 118

    (17) translation -> ROTATE ( animation_param , expression , AROUND ( . point_expression ) )
    (28) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 52

    point_expression               shift and go to state 123

state 119

    (30) color_expression -> COLOR ( expression , expression , expression . )
    (31) expression -> expression . ADD_OP expression
    (32) expression -> expression . MUL_OP expression

    )               shift and go to state 124
    ADD_OP          shift and go to state 40
    MUL_OP          shift and go to state 41


state 120

    (14) structure -> FOR ( expression , expression , expression ) { . subprogram }
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . assignation_size
    (9) statement -> . assignation_time
    (10) statement -> . structure
    (11) statement -> . shape
    (12) statement -> . animation
    (13) statement -> . PRINT expression
    (42) assignation -> . IDENTIFIER = expression
    (40) assignation_shape -> . IDENTIFIER = shape
    (39) assignation_color -> . IDENTIFIER = color_expression
    (38) assignation_point -> . IDENTIFIER = point_expression
    (37) assignation_size -> . IDENTIFIER = size_expression
    (41) assignation_time -> . IDENTIFIER = TIME ( expression )
    (14) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (20) shape -> . circle_g
    (21) shape -> . rect_g
    (22) shape -> . polygon_g
    (15) animation -> . translation
    (23) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (24) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (25) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }
    (16) translation -> . TRANSLATE ( animation_param , point_expression )
    (17) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    PRINT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    FOR             shift and go to state 15
    CIRCLE          shift and go to state 20
    RECT            shift and go to state 21
    POLYGON         shift and go to state 22
    TRANSLATE       shift and go to state 23
    ROTATE          shift and go to state 24

    subprogram                     shift and go to state 125
    statement                      shift and go to state 3
    assignation                    shift and go to state 4
    assignation_shape              shift and go to state 5
    assignation_color              shift and go to state 6
    assignation_point              shift and go to state 7
    assignation_size               shift and go to state 8
    assignation_time               shift and go to state 9
    structure                      shift and go to state 10
    shape                          shift and go to state 11
    animation                      shift and go to state 12
    circle_g                       shift and go to state 16
    rect_g                         shift and go to state 17
    polygon_g                      shift and go to state 18
    translation                    shift and go to state 19

state 121

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , . color_expression }
    (30) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 51

    color_expression               shift and go to state 126

state 122

    (25) polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression . }

    }               shift and go to state 127


state 123

    (17) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression . ) )

    )               shift and go to state 128


state 124

    (30) color_expression -> COLOR ( expression , expression , expression ) .

    ;               reduce using rule 30 (color_expression -> COLOR ( expression , expression , expression ) .)
    }               reduce using rule 30 (color_expression -> COLOR ( expression , expression , expression ) .)


state 125

    (14) structure -> FOR ( expression , expression , expression ) { subprogram . }

    }               shift and go to state 129


state 126

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression . }

    }               shift and go to state 130


state 127

    (25) polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression } .

    ;               reduce using rule 25 (polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression } .)
    ,               reduce using rule 25 (polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression } .)


state 128

    (17) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) . )

    )               shift and go to state 131


state 129

    (14) structure -> FOR ( expression , expression , expression ) { subprogram } .

    ;               reduce using rule 14 (structure -> FOR ( expression , expression , expression ) { subprogram } .)


state 130

    (23) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .

    ;               reduce using rule 23 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)
    ,               reduce using rule 23 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)


state 131

    (17) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) ) .

    ;               reduce using rule 17 (translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) ) .)

