Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> subprogram
Rule 2     subprogram -> statement ;
Rule 3     subprogram -> statement ; subprogram
Rule 4     statement -> assignation
Rule 5     statement -> assignation_shape
Rule 6     statement -> assignation_color
Rule 7     statement -> assignation_point
Rule 8     statement -> structure
Rule 9     statement -> shape
Rule 10    statement -> animation
Rule 11    statement -> PRINT expression
Rule 12    structure -> FOR ( expression , expression , expression ) { subprogram }
Rule 13    animation -> translation
Rule 14    translation -> TRANSLATE ( animation_param , point_expression )
Rule 15    translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) )
Rule 16    animation_param -> IDENTIFIER
Rule 17    animation_param -> shape
Rule 18    shape -> circle_g
Rule 19    shape -> rect_g
Rule 20    shape -> polygon_g
Rule 21    circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
Rule 22    rect_g -> RECT { point_expression , size_expression , color_expression }
Rule 23    polygon_g -> POLYGON { ( points_expression ) , color_expression }
Rule 24    points_expression -> point_expression
Rule 25    points_expression -> point_expression , points_expression
Rule 26    point_expression -> POINT ( expression , expression )
Rule 27    size_expression -> SIZE ( expression , expression )
Rule 28    color_expression -> COLOR ( expression , expression , expression )
Rule 29    expression -> expression ADD_OP expression
Rule 30    expression -> expression MUL_OP expression
Rule 31    expression -> NUMBER
Rule 32    expression -> IDENTIFIER
Rule 33    expression -> ( expression )
Rule 34    expression -> ADD_OP expression
Rule 35    assignation_point -> IDENTIFIER = point_expression
Rule 36    assignation_color -> IDENTIFIER = color_expression
Rule 37    assignation_shape -> IDENTIFIER = shape
Rule 38    assignation -> IDENTIFIER = expression
Rule 39    expression -> RANDOM ( expression )
Rule 40    expression -> RANDOM ( expression , expression )

Terminals, with rules where they appear

(                    : 12 14 15 15 21 23 26 27 28 33 39 40
)                    : 12 14 15 15 21 23 26 27 28 33 39 40
,                    : 12 12 14 15 15 21 21 22 22 23 25 26 27 28 28 40
;                    : 2 3
=                    : 35 36 37 38
ADD_OP               : 29 34
AROUND               : 15
CIRCLE               : 21
COLOR                : 28
FOR                  : 12
IDENTIFIER           : 16 32 35 36 37 38
MUL_OP               : 30
NUMBER               : 31
POINT                : 26
POLYGON              : 23
PRINT                : 11
RADIUS               : 21
RANDOM               : 39 40
RECT                 : 22
ROTATE               : 15
SIZE                 : 27
TRANSLATE            : 14
error                : 
{                    : 12 21 22 23
}                    : 12 21 22 23

Nonterminals, with rules where they appear

animation            : 10
animation_param      : 14 15
assignation          : 4
assignation_color    : 6
assignation_point    : 7
assignation_shape    : 5
circle_g             : 18
color_expression     : 21 22 23 36
expression           : 11 12 12 12 15 21 26 26 27 27 28 28 28 29 29 30 30 33 34 38 39 40 40
point_expression     : 14 15 21 22 24 25 35
points_expression    : 23 25
polygon_g            : 20
program              : 0
rect_g               : 19
shape                : 9 17 37
size_expression      : 22
statement            : 2 3
structure            : 8
subprogram           : 1 3 12
translation          : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . subprogram
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . structure
    (9) statement -> . shape
    (10) statement -> . animation
    (11) statement -> . PRINT expression
    (38) assignation -> . IDENTIFIER = expression
    (37) assignation_shape -> . IDENTIFIER = shape
    (36) assignation_color -> . IDENTIFIER = color_expression
    (35) assignation_point -> . IDENTIFIER = point_expression
    (12) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (18) shape -> . circle_g
    (19) shape -> . rect_g
    (20) shape -> . polygon_g
    (13) animation -> . translation
    (21) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (22) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (23) polygon_g -> . POLYGON { ( points_expression ) , color_expression }
    (14) translation -> . TRANSLATE ( animation_param , point_expression )
    (15) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    PRINT           shift and go to state 11
    IDENTIFIER      shift and go to state 12
    FOR             shift and go to state 13
    CIRCLE          shift and go to state 18
    RECT            shift and go to state 19
    POLYGON         shift and go to state 20
    TRANSLATE       shift and go to state 21
    ROTATE          shift and go to state 22

    program                        shift and go to state 1
    subprogram                     shift and go to state 2
    statement                      shift and go to state 3
    assignation                    shift and go to state 4
    assignation_shape              shift and go to state 5
    assignation_color              shift and go to state 6
    assignation_point              shift and go to state 7
    structure                      shift and go to state 8
    shape                          shift and go to state 9
    animation                      shift and go to state 10
    circle_g                       shift and go to state 14
    rect_g                         shift and go to state 15
    polygon_g                      shift and go to state 16
    translation                    shift and go to state 17

state 1

    (0) S' -> program .



state 2

    (1) program -> subprogram .

    $end            reduce using rule 1 (program -> subprogram .)


state 3

    (2) subprogram -> statement . ;
    (3) subprogram -> statement . ; subprogram

    ;               shift and go to state 23


state 4

    (4) statement -> assignation .

    ;               reduce using rule 4 (statement -> assignation .)


state 5

    (5) statement -> assignation_shape .

    ;               reduce using rule 5 (statement -> assignation_shape .)


state 6

    (6) statement -> assignation_color .

    ;               reduce using rule 6 (statement -> assignation_color .)


state 7

    (7) statement -> assignation_point .

    ;               reduce using rule 7 (statement -> assignation_point .)


state 8

    (8) statement -> structure .

    ;               reduce using rule 8 (statement -> structure .)


state 9

    (9) statement -> shape .

    ;               reduce using rule 9 (statement -> shape .)


state 10

    (10) statement -> animation .

    ;               reduce using rule 10 (statement -> animation .)


state 11

    (11) statement -> PRINT . expression
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 24

state 12

    (38) assignation -> IDENTIFIER . = expression
    (37) assignation_shape -> IDENTIFIER . = shape
    (36) assignation_color -> IDENTIFIER . = color_expression
    (35) assignation_point -> IDENTIFIER . = point_expression

    =               shift and go to state 30


state 13

    (12) structure -> FOR . ( expression , expression , expression ) { subprogram }

    (               shift and go to state 31


state 14

    (18) shape -> circle_g .

    ;               reduce using rule 18 (shape -> circle_g .)
    ,               reduce using rule 18 (shape -> circle_g .)


state 15

    (19) shape -> rect_g .

    ;               reduce using rule 19 (shape -> rect_g .)
    ,               reduce using rule 19 (shape -> rect_g .)


state 16

    (20) shape -> polygon_g .

    ;               reduce using rule 20 (shape -> polygon_g .)
    ,               reduce using rule 20 (shape -> polygon_g .)


state 17

    (13) animation -> translation .

    ;               reduce using rule 13 (animation -> translation .)


state 18

    (21) circle_g -> CIRCLE . { point_expression , RADIUS ( expression ) , color_expression }

    {               shift and go to state 32


state 19

    (22) rect_g -> RECT . { point_expression , size_expression , color_expression }

    {               shift and go to state 33


state 20

    (23) polygon_g -> POLYGON . { ( points_expression ) , color_expression }

    {               shift and go to state 34


state 21

    (14) translation -> TRANSLATE . ( animation_param , point_expression )

    (               shift and go to state 35


state 22

    (15) translation -> ROTATE . ( animation_param , expression , AROUND ( point_expression ) )

    (               shift and go to state 36


state 23

    (2) subprogram -> statement ; .
    (3) subprogram -> statement ; . subprogram
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . structure
    (9) statement -> . shape
    (10) statement -> . animation
    (11) statement -> . PRINT expression
    (38) assignation -> . IDENTIFIER = expression
    (37) assignation_shape -> . IDENTIFIER = shape
    (36) assignation_color -> . IDENTIFIER = color_expression
    (35) assignation_point -> . IDENTIFIER = point_expression
    (12) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (18) shape -> . circle_g
    (19) shape -> . rect_g
    (20) shape -> . polygon_g
    (13) animation -> . translation
    (21) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (22) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (23) polygon_g -> . POLYGON { ( points_expression ) , color_expression }
    (14) translation -> . TRANSLATE ( animation_param , point_expression )
    (15) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    $end            reduce using rule 2 (subprogram -> statement ; .)
    }               reduce using rule 2 (subprogram -> statement ; .)
    PRINT           shift and go to state 11
    IDENTIFIER      shift and go to state 12
    FOR             shift and go to state 13
    CIRCLE          shift and go to state 18
    RECT            shift and go to state 19
    POLYGON         shift and go to state 20
    TRANSLATE       shift and go to state 21
    ROTATE          shift and go to state 22

    statement                      shift and go to state 3
    subprogram                     shift and go to state 37
    assignation                    shift and go to state 4
    assignation_shape              shift and go to state 5
    assignation_color              shift and go to state 6
    assignation_point              shift and go to state 7
    structure                      shift and go to state 8
    shape                          shift and go to state 9
    animation                      shift and go to state 10
    circle_g                       shift and go to state 14
    rect_g                         shift and go to state 15
    polygon_g                      shift and go to state 16
    translation                    shift and go to state 17

state 24

    (11) statement -> PRINT expression .
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ;               reduce using rule 11 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 25

    (34) expression -> ADD_OP . expression
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 40

state 26

    (31) expression -> NUMBER .

    ADD_OP          reduce using rule 31 (expression -> NUMBER .)
    MUL_OP          reduce using rule 31 (expression -> NUMBER .)
    ;               reduce using rule 31 (expression -> NUMBER .)
    )               reduce using rule 31 (expression -> NUMBER .)
    ,               reduce using rule 31 (expression -> NUMBER .)


state 27

    (32) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 32 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 32 (expression -> IDENTIFIER .)
    ;               reduce using rule 32 (expression -> IDENTIFIER .)
    )               reduce using rule 32 (expression -> IDENTIFIER .)
    ,               reduce using rule 32 (expression -> IDENTIFIER .)


state 28

    (33) expression -> ( . expression )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 41

state 29

    (39) expression -> RANDOM . ( expression )
    (40) expression -> RANDOM . ( expression , expression )

    (               shift and go to state 42


state 30

    (38) assignation -> IDENTIFIER = . expression
    (37) assignation_shape -> IDENTIFIER = . shape
    (36) assignation_color -> IDENTIFIER = . color_expression
    (35) assignation_point -> IDENTIFIER = . point_expression
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )
    (18) shape -> . circle_g
    (19) shape -> . rect_g
    (20) shape -> . polygon_g
    (28) color_expression -> . COLOR ( expression , expression , expression )
    (26) point_expression -> . POINT ( expression , expression )
    (21) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (22) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (23) polygon_g -> . POLYGON { ( points_expression ) , color_expression }

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29
    COLOR           shift and go to state 47
    POINT           shift and go to state 48
    CIRCLE          shift and go to state 18
    RECT            shift and go to state 19
    POLYGON         shift and go to state 20

    expression                     shift and go to state 43
    shape                          shift and go to state 44
    color_expression               shift and go to state 45
    point_expression               shift and go to state 46
    circle_g                       shift and go to state 14
    rect_g                         shift and go to state 15
    polygon_g                      shift and go to state 16

state 31

    (12) structure -> FOR ( . expression , expression , expression ) { subprogram }
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 49

state 32

    (21) circle_g -> CIRCLE { . point_expression , RADIUS ( expression ) , color_expression }
    (26) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 48

    point_expression               shift and go to state 50

state 33

    (22) rect_g -> RECT { . point_expression , size_expression , color_expression }
    (26) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 48

    point_expression               shift and go to state 51

state 34

    (23) polygon_g -> POLYGON { . ( points_expression ) , color_expression }

    (               shift and go to state 52


state 35

    (14) translation -> TRANSLATE ( . animation_param , point_expression )
    (16) animation_param -> . IDENTIFIER
    (17) animation_param -> . shape
    (18) shape -> . circle_g
    (19) shape -> . rect_g
    (20) shape -> . polygon_g
    (21) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (22) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (23) polygon_g -> . POLYGON { ( points_expression ) , color_expression }

    IDENTIFIER      shift and go to state 54
    CIRCLE          shift and go to state 18
    RECT            shift and go to state 19
    POLYGON         shift and go to state 20

    animation_param                shift and go to state 53
    shape                          shift and go to state 55
    circle_g                       shift and go to state 14
    rect_g                         shift and go to state 15
    polygon_g                      shift and go to state 16

state 36

    (15) translation -> ROTATE ( . animation_param , expression , AROUND ( point_expression ) )
    (16) animation_param -> . IDENTIFIER
    (17) animation_param -> . shape
    (18) shape -> . circle_g
    (19) shape -> . rect_g
    (20) shape -> . polygon_g
    (21) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (22) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (23) polygon_g -> . POLYGON { ( points_expression ) , color_expression }

    IDENTIFIER      shift and go to state 54
    CIRCLE          shift and go to state 18
    RECT            shift and go to state 19
    POLYGON         shift and go to state 20

    animation_param                shift and go to state 56
    shape                          shift and go to state 55
    circle_g                       shift and go to state 14
    rect_g                         shift and go to state 15
    polygon_g                      shift and go to state 16

state 37

    (3) subprogram -> statement ; subprogram .

    $end            reduce using rule 3 (subprogram -> statement ; subprogram .)
    }               reduce using rule 3 (subprogram -> statement ; subprogram .)


state 38

    (29) expression -> expression ADD_OP . expression
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 57

state 39

    (30) expression -> expression MUL_OP . expression
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 58

state 40

    (34) expression -> ADD_OP expression .
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 34 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 34 (expression -> ADD_OP expression .)
    ;               reduce using rule 34 (expression -> ADD_OP expression .)
    )               reduce using rule 34 (expression -> ADD_OP expression .)
    ,               reduce using rule 34 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 38 ]
  ! MUL_OP          [ shift and go to state 39 ]


state 41

    (33) expression -> ( expression . )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    )               shift and go to state 59
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 42

    (39) expression -> RANDOM ( . expression )
    (40) expression -> RANDOM ( . expression , expression )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 60

state 43

    (38) assignation -> IDENTIFIER = expression .
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ;               reduce using rule 38 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 44

    (37) assignation_shape -> IDENTIFIER = shape .

    ;               reduce using rule 37 (assignation_shape -> IDENTIFIER = shape .)


state 45

    (36) assignation_color -> IDENTIFIER = color_expression .

    ;               reduce using rule 36 (assignation_color -> IDENTIFIER = color_expression .)


state 46

    (35) assignation_point -> IDENTIFIER = point_expression .

    ;               reduce using rule 35 (assignation_point -> IDENTIFIER = point_expression .)


state 47

    (28) color_expression -> COLOR . ( expression , expression , expression )

    (               shift and go to state 61


state 48

    (26) point_expression -> POINT . ( expression , expression )

    (               shift and go to state 62


state 49

    (12) structure -> FOR ( expression . , expression , expression ) { subprogram }
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ,               shift and go to state 63
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 50

    (21) circle_g -> CIRCLE { point_expression . , RADIUS ( expression ) , color_expression }

    ,               shift and go to state 64


state 51

    (22) rect_g -> RECT { point_expression . , size_expression , color_expression }

    ,               shift and go to state 65


state 52

    (23) polygon_g -> POLYGON { ( . points_expression ) , color_expression }
    (24) points_expression -> . point_expression
    (25) points_expression -> . point_expression , points_expression
    (26) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 48

    points_expression              shift and go to state 66
    point_expression               shift and go to state 67

state 53

    (14) translation -> TRANSLATE ( animation_param . , point_expression )

    ,               shift and go to state 68


state 54

    (16) animation_param -> IDENTIFIER .

    ,               reduce using rule 16 (animation_param -> IDENTIFIER .)


state 55

    (17) animation_param -> shape .

    ,               reduce using rule 17 (animation_param -> shape .)


state 56

    (15) translation -> ROTATE ( animation_param . , expression , AROUND ( point_expression ) )

    ,               shift and go to state 69


state 57

    (29) expression -> expression ADD_OP expression .
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 29 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 29 (expression -> expression ADD_OP expression .)
    )               reduce using rule 29 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 29 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 39

  ! MUL_OP          [ reduce using rule 29 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 38 ]


state 58

    (30) expression -> expression MUL_OP expression .
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 30 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 30 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 30 (expression -> expression MUL_OP expression .)
    )               reduce using rule 30 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 30 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 38 ]
  ! MUL_OP          [ shift and go to state 39 ]


state 59

    (33) expression -> ( expression ) .

    ADD_OP          reduce using rule 33 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 33 (expression -> ( expression ) .)
    ;               reduce using rule 33 (expression -> ( expression ) .)
    )               reduce using rule 33 (expression -> ( expression ) .)
    ,               reduce using rule 33 (expression -> ( expression ) .)


state 60

    (39) expression -> RANDOM ( expression . )
    (40) expression -> RANDOM ( expression . , expression )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    )               shift and go to state 70
    ,               shift and go to state 71
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 61

    (28) color_expression -> COLOR ( . expression , expression , expression )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 72

state 62

    (26) point_expression -> POINT ( . expression , expression )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 73

state 63

    (12) structure -> FOR ( expression , . expression , expression ) { subprogram }
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 74

state 64

    (21) circle_g -> CIRCLE { point_expression , . RADIUS ( expression ) , color_expression }

    RADIUS          shift and go to state 75


state 65

    (22) rect_g -> RECT { point_expression , . size_expression , color_expression }
    (27) size_expression -> . SIZE ( expression , expression )

    SIZE            shift and go to state 77

    size_expression                shift and go to state 76

state 66

    (23) polygon_g -> POLYGON { ( points_expression . ) , color_expression }

    )               shift and go to state 78


state 67

    (24) points_expression -> point_expression .
    (25) points_expression -> point_expression . , points_expression

    )               reduce using rule 24 (points_expression -> point_expression .)
    ,               shift and go to state 79


state 68

    (14) translation -> TRANSLATE ( animation_param , . point_expression )
    (26) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 48

    point_expression               shift and go to state 80

state 69

    (15) translation -> ROTATE ( animation_param , . expression , AROUND ( point_expression ) )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 81

state 70

    (39) expression -> RANDOM ( expression ) .

    ADD_OP          reduce using rule 39 (expression -> RANDOM ( expression ) .)
    MUL_OP          reduce using rule 39 (expression -> RANDOM ( expression ) .)
    ;               reduce using rule 39 (expression -> RANDOM ( expression ) .)
    )               reduce using rule 39 (expression -> RANDOM ( expression ) .)
    ,               reduce using rule 39 (expression -> RANDOM ( expression ) .)


state 71

    (40) expression -> RANDOM ( expression , . expression )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 82

state 72

    (28) color_expression -> COLOR ( expression . , expression , expression )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ,               shift and go to state 83
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 73

    (26) point_expression -> POINT ( expression . , expression )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ,               shift and go to state 84
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 74

    (12) structure -> FOR ( expression , expression . , expression ) { subprogram }
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ,               shift and go to state 85
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 75

    (21) circle_g -> CIRCLE { point_expression , RADIUS . ( expression ) , color_expression }

    (               shift and go to state 86


state 76

    (22) rect_g -> RECT { point_expression , size_expression . , color_expression }

    ,               shift and go to state 87


state 77

    (27) size_expression -> SIZE . ( expression , expression )

    (               shift and go to state 88


state 78

    (23) polygon_g -> POLYGON { ( points_expression ) . , color_expression }

    ,               shift and go to state 89


state 79

    (25) points_expression -> point_expression , . points_expression
    (24) points_expression -> . point_expression
    (25) points_expression -> . point_expression , points_expression
    (26) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 48

    point_expression               shift and go to state 67
    points_expression              shift and go to state 90

state 80

    (14) translation -> TRANSLATE ( animation_param , point_expression . )

    )               shift and go to state 91


state 81

    (15) translation -> ROTATE ( animation_param , expression . , AROUND ( point_expression ) )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ,               shift and go to state 92
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 82

    (40) expression -> RANDOM ( expression , expression . )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    )               shift and go to state 93
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 83

    (28) color_expression -> COLOR ( expression , . expression , expression )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 94

state 84

    (26) point_expression -> POINT ( expression , . expression )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 95

state 85

    (12) structure -> FOR ( expression , expression , . expression ) { subprogram }
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 96

state 86

    (21) circle_g -> CIRCLE { point_expression , RADIUS ( . expression ) , color_expression }
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 97

state 87

    (22) rect_g -> RECT { point_expression , size_expression , . color_expression }
    (28) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 47

    color_expression               shift and go to state 98

state 88

    (27) size_expression -> SIZE ( . expression , expression )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 99

state 89

    (23) polygon_g -> POLYGON { ( points_expression ) , . color_expression }
    (28) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 47

    color_expression               shift and go to state 100

state 90

    (25) points_expression -> point_expression , points_expression .

    )               reduce using rule 25 (points_expression -> point_expression , points_expression .)


state 91

    (14) translation -> TRANSLATE ( animation_param , point_expression ) .

    ;               reduce using rule 14 (translation -> TRANSLATE ( animation_param , point_expression ) .)


state 92

    (15) translation -> ROTATE ( animation_param , expression , . AROUND ( point_expression ) )

    AROUND          shift and go to state 101


state 93

    (40) expression -> RANDOM ( expression , expression ) .

    ADD_OP          reduce using rule 40 (expression -> RANDOM ( expression , expression ) .)
    MUL_OP          reduce using rule 40 (expression -> RANDOM ( expression , expression ) .)
    ;               reduce using rule 40 (expression -> RANDOM ( expression , expression ) .)
    )               reduce using rule 40 (expression -> RANDOM ( expression , expression ) .)
    ,               reduce using rule 40 (expression -> RANDOM ( expression , expression ) .)


state 94

    (28) color_expression -> COLOR ( expression , expression . , expression )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ,               shift and go to state 102
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 95

    (26) point_expression -> POINT ( expression , expression . )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    )               shift and go to state 103
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 96

    (12) structure -> FOR ( expression , expression , expression . ) { subprogram }
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    )               shift and go to state 104
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 97

    (21) circle_g -> CIRCLE { point_expression , RADIUS ( expression . ) , color_expression }
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    )               shift and go to state 105
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 98

    (22) rect_g -> RECT { point_expression , size_expression , color_expression . }

    }               shift and go to state 106


state 99

    (27) size_expression -> SIZE ( expression . , expression )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    ,               shift and go to state 107
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 100

    (23) polygon_g -> POLYGON { ( points_expression ) , color_expression . }

    }               shift and go to state 108


state 101

    (15) translation -> ROTATE ( animation_param , expression , AROUND . ( point_expression ) )

    (               shift and go to state 109


state 102

    (28) color_expression -> COLOR ( expression , expression , . expression )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 110

state 103

    (26) point_expression -> POINT ( expression , expression ) .

    ;               reduce using rule 26 (point_expression -> POINT ( expression , expression ) .)
    ,               reduce using rule 26 (point_expression -> POINT ( expression , expression ) .)
    )               reduce using rule 26 (point_expression -> POINT ( expression , expression ) .)


state 104

    (12) structure -> FOR ( expression , expression , expression ) . { subprogram }

    {               shift and go to state 111


state 105

    (21) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) . , color_expression }

    ,               shift and go to state 112


state 106

    (22) rect_g -> RECT { point_expression , size_expression , color_expression } .

    ;               reduce using rule 22 (rect_g -> RECT { point_expression , size_expression , color_expression } .)
    ,               reduce using rule 22 (rect_g -> RECT { point_expression , size_expression , color_expression } .)


state 107

    (27) size_expression -> SIZE ( expression , . expression )
    (29) expression -> . expression ADD_OP expression
    (30) expression -> . expression MUL_OP expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . ( expression )
    (34) expression -> . ADD_OP expression
    (39) expression -> . RANDOM ( expression )
    (40) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    (               shift and go to state 28
    ADD_OP          shift and go to state 25
    RANDOM          shift and go to state 29

    expression                     shift and go to state 113

state 108

    (23) polygon_g -> POLYGON { ( points_expression ) , color_expression } .

    ;               reduce using rule 23 (polygon_g -> POLYGON { ( points_expression ) , color_expression } .)
    ,               reduce using rule 23 (polygon_g -> POLYGON { ( points_expression ) , color_expression } .)


state 109

    (15) translation -> ROTATE ( animation_param , expression , AROUND ( . point_expression ) )
    (26) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 48

    point_expression               shift and go to state 114

state 110

    (28) color_expression -> COLOR ( expression , expression , expression . )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    )               shift and go to state 115
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 111

    (12) structure -> FOR ( expression , expression , expression ) { . subprogram }
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . structure
    (9) statement -> . shape
    (10) statement -> . animation
    (11) statement -> . PRINT expression
    (38) assignation -> . IDENTIFIER = expression
    (37) assignation_shape -> . IDENTIFIER = shape
    (36) assignation_color -> . IDENTIFIER = color_expression
    (35) assignation_point -> . IDENTIFIER = point_expression
    (12) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (18) shape -> . circle_g
    (19) shape -> . rect_g
    (20) shape -> . polygon_g
    (13) animation -> . translation
    (21) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (22) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (23) polygon_g -> . POLYGON { ( points_expression ) , color_expression }
    (14) translation -> . TRANSLATE ( animation_param , point_expression )
    (15) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    PRINT           shift and go to state 11
    IDENTIFIER      shift and go to state 12
    FOR             shift and go to state 13
    CIRCLE          shift and go to state 18
    RECT            shift and go to state 19
    POLYGON         shift and go to state 20
    TRANSLATE       shift and go to state 21
    ROTATE          shift and go to state 22

    subprogram                     shift and go to state 116
    statement                      shift and go to state 3
    assignation                    shift and go to state 4
    assignation_shape              shift and go to state 5
    assignation_color              shift and go to state 6
    assignation_point              shift and go to state 7
    structure                      shift and go to state 8
    shape                          shift and go to state 9
    animation                      shift and go to state 10
    circle_g                       shift and go to state 14
    rect_g                         shift and go to state 15
    polygon_g                      shift and go to state 16
    translation                    shift and go to state 17

state 112

    (21) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , . color_expression }
    (28) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 47

    color_expression               shift and go to state 117

state 113

    (27) size_expression -> SIZE ( expression , expression . )
    (29) expression -> expression . ADD_OP expression
    (30) expression -> expression . MUL_OP expression

    )               shift and go to state 118
    ADD_OP          shift and go to state 38
    MUL_OP          shift and go to state 39


state 114

    (15) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression . ) )

    )               shift and go to state 119


state 115

    (28) color_expression -> COLOR ( expression , expression , expression ) .

    ;               reduce using rule 28 (color_expression -> COLOR ( expression , expression , expression ) .)
    }               reduce using rule 28 (color_expression -> COLOR ( expression , expression , expression ) .)


state 116

    (12) structure -> FOR ( expression , expression , expression ) { subprogram . }

    }               shift and go to state 120


state 117

    (21) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression . }

    }               shift and go to state 121


state 118

    (27) size_expression -> SIZE ( expression , expression ) .

    ,               reduce using rule 27 (size_expression -> SIZE ( expression , expression ) .)


state 119

    (15) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) . )

    )               shift and go to state 122


state 120

    (12) structure -> FOR ( expression , expression , expression ) { subprogram } .

    ;               reduce using rule 12 (structure -> FOR ( expression , expression , expression ) { subprogram } .)


state 121

    (21) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .

    ;               reduce using rule 21 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)
    ,               reduce using rule 21 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)


state 122

    (15) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) ) .

    ;               reduce using rule 15 (translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) ) .)

