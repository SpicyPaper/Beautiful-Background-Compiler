Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> subprogram
Rule 2     subprogram -> statement ;
Rule 3     subprogram -> statement ; subprogram
Rule 4     statement -> assignation
Rule 5     statement -> assignation_shape
Rule 6     statement -> assignation_color
Rule 7     statement -> assignation_point
Rule 8     statement -> assignation_size
Rule 9     statement -> structure
Rule 10    statement -> shape
Rule 11    statement -> animation
Rule 12    statement -> PRINT expression
Rule 13    structure -> FOR ( expression , expression , expression ) { subprogram }
Rule 14    animation -> translation
Rule 15    translation -> TRANSLATE ( animation_param , point_expression )
Rule 16    translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) )
Rule 17    animation_param -> IDENTIFIER
Rule 18    animation_param -> shape
Rule 19    shape -> circle_g
Rule 20    shape -> rect_g
Rule 21    shape -> polygon_g
Rule 22    circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
Rule 23    rect_g -> RECT { point_expression , size_expression , color_expression }
Rule 24    polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression }
Rule 25    points_expression -> point_expression
Rule 26    points_expression -> point_expression , points_expression
Rule 27    point_expression -> POINT ( expression , expression )
Rule 28    size_expression -> SIZE ( expression , expression )
Rule 29    color_expression -> COLOR ( expression , expression , expression )
Rule 30    expression -> expression ADD_OP expression
Rule 31    expression -> expression MUL_OP expression
Rule 32    expression -> NUMBER
Rule 33    expression -> IDENTIFIER
Rule 34    expression -> ( expression )
Rule 35    expression -> ADD_OP expression
Rule 36    assignation_size -> IDENTIFIER = size_expression
Rule 37    assignation_point -> IDENTIFIER = point_expression
Rule 38    assignation_color -> IDENTIFIER = color_expression
Rule 39    assignation_shape -> IDENTIFIER = shape
Rule 40    assignation -> IDENTIFIER = expression
Rule 41    expression -> RANDOM ( expression )
Rule 42    expression -> RANDOM ( expression , expression )

Terminals, with rules where they appear

(                    : 13 15 16 16 22 24 27 28 29 34 41 42
)                    : 13 15 16 16 22 24 27 28 29 34 41 42
,                    : 13 13 15 16 16 22 22 23 23 24 24 26 27 28 29 29 42
;                    : 2 3
=                    : 36 37 38 39 40
ADD_OP               : 30 35
AROUND               : 16
CIRCLE               : 22
COLOR                : 29
FOR                  : 13
IDENTIFIER           : 17 33 36 37 38 39 40
MUL_OP               : 31
NUMBER               : 32
POINT                : 27
POLYGON              : 24
PRINT                : 12
RADIUS               : 22
RANDOM               : 41 42
RECT                 : 23
ROTATE               : 16
SIZE                 : 28
TRANSLATE            : 15
error                : 
{                    : 13 22 23 24
}                    : 13 22 23 24

Nonterminals, with rules where they appear

animation            : 11
animation_param      : 15 16
assignation          : 4
assignation_color    : 6
assignation_point    : 7
assignation_shape    : 5
assignation_size     : 8
circle_g             : 19
color_expression     : 22 23 24 38
expression           : 12 13 13 13 16 22 27 27 28 28 29 29 29 30 30 31 31 34 35 40 41 42 42
point_expression     : 15 16 22 23 24 25 26 37
points_expression    : 24 26
polygon_g            : 21
program              : 0
rect_g               : 20
shape                : 10 18 39
size_expression      : 23 36
statement            : 2 3
structure            : 9
subprogram           : 1 3 13
translation          : 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . subprogram
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . assignation_size
    (9) statement -> . structure
    (10) statement -> . shape
    (11) statement -> . animation
    (12) statement -> . PRINT expression
    (40) assignation -> . IDENTIFIER = expression
    (39) assignation_shape -> . IDENTIFIER = shape
    (38) assignation_color -> . IDENTIFIER = color_expression
    (37) assignation_point -> . IDENTIFIER = point_expression
    (36) assignation_size -> . IDENTIFIER = size_expression
    (13) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (19) shape -> . circle_g
    (20) shape -> . rect_g
    (21) shape -> . polygon_g
    (14) animation -> . translation
    (22) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (23) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (24) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }
    (15) translation -> . TRANSLATE ( animation_param , point_expression )
    (16) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    PRINT           shift and go to state 7
    IDENTIFIER      shift and go to state 16
    FOR             shift and go to state 21
    CIRCLE          shift and go to state 22
    RECT            shift and go to state 15
    POLYGON         shift and go to state 11
    TRANSLATE       shift and go to state 5
    ROTATE          shift and go to state 4

    program                        shift and go to state 1
    assignation_size               shift and go to state 17
    assignation                    shift and go to state 2
    subprogram                     shift and go to state 3
    rect_g                         shift and go to state 18
    statement                      shift and go to state 19
    assignation_point              shift and go to state 20
    assignation_color              shift and go to state 8
    animation                      shift and go to state 9
    polygon_g                      shift and go to state 10
    assignation_shape              shift and go to state 6
    circle_g                       shift and go to state 12
    shape                          shift and go to state 13
    structure                      shift and go to state 14
    translation                    shift and go to state 23

state 1

    (0) S' -> program .



state 2

    (4) statement -> assignation .

    ;               reduce using rule 4 (statement -> assignation .)


state 3

    (1) program -> subprogram .

    $end            reduce using rule 1 (program -> subprogram .)


state 4

    (16) translation -> ROTATE . ( animation_param , expression , AROUND ( point_expression ) )

    (               shift and go to state 24


state 5

    (15) translation -> TRANSLATE . ( animation_param , point_expression )

    (               shift and go to state 25


state 6

    (5) statement -> assignation_shape .

    ;               reduce using rule 5 (statement -> assignation_shape .)


state 7

    (12) statement -> PRINT . expression
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 27

state 8

    (6) statement -> assignation_color .

    ;               reduce using rule 6 (statement -> assignation_color .)


state 9

    (11) statement -> animation .

    ;               reduce using rule 11 (statement -> animation .)


state 10

    (21) shape -> polygon_g .

    ;               reduce using rule 21 (shape -> polygon_g .)
    ,               reduce using rule 21 (shape -> polygon_g .)


state 11

    (24) polygon_g -> POLYGON . { point_expression , ( points_expression ) , color_expression }

    {               shift and go to state 32


state 12

    (19) shape -> circle_g .

    ;               reduce using rule 19 (shape -> circle_g .)
    ,               reduce using rule 19 (shape -> circle_g .)


state 13

    (10) statement -> shape .

    ;               reduce using rule 10 (statement -> shape .)


state 14

    (9) statement -> structure .

    ;               reduce using rule 9 (statement -> structure .)


state 15

    (23) rect_g -> RECT . { point_expression , size_expression , color_expression }

    {               shift and go to state 33


state 16

    (40) assignation -> IDENTIFIER . = expression
    (39) assignation_shape -> IDENTIFIER . = shape
    (38) assignation_color -> IDENTIFIER . = color_expression
    (37) assignation_point -> IDENTIFIER . = point_expression
    (36) assignation_size -> IDENTIFIER . = size_expression

    =               shift and go to state 34


state 17

    (8) statement -> assignation_size .

    ;               reduce using rule 8 (statement -> assignation_size .)


state 18

    (20) shape -> rect_g .

    ;               reduce using rule 20 (shape -> rect_g .)
    ,               reduce using rule 20 (shape -> rect_g .)


state 19

    (2) subprogram -> statement . ;
    (3) subprogram -> statement . ; subprogram

    ;               shift and go to state 35


state 20

    (7) statement -> assignation_point .

    ;               reduce using rule 7 (statement -> assignation_point .)


state 21

    (13) structure -> FOR . ( expression , expression , expression ) { subprogram }

    (               shift and go to state 36


state 22

    (22) circle_g -> CIRCLE . { point_expression , RADIUS ( expression ) , color_expression }

    {               shift and go to state 37


state 23

    (14) animation -> translation .

    ;               reduce using rule 14 (animation -> translation .)


state 24

    (16) translation -> ROTATE ( . animation_param , expression , AROUND ( point_expression ) )
    (17) animation_param -> . IDENTIFIER
    (18) animation_param -> . shape
    (19) shape -> . circle_g
    (20) shape -> . rect_g
    (21) shape -> . polygon_g
    (22) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (23) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (24) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }

    IDENTIFIER      shift and go to state 39
    CIRCLE          shift and go to state 22
    RECT            shift and go to state 15
    POLYGON         shift and go to state 11

    rect_g                         shift and go to state 18
    circle_g                       shift and go to state 12
    shape                          shift and go to state 38
    animation_param                shift and go to state 40
    polygon_g                      shift and go to state 10

state 25

    (15) translation -> TRANSLATE ( . animation_param , point_expression )
    (17) animation_param -> . IDENTIFIER
    (18) animation_param -> . shape
    (19) shape -> . circle_g
    (20) shape -> . rect_g
    (21) shape -> . polygon_g
    (22) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (23) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (24) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }

    IDENTIFIER      shift and go to state 39
    CIRCLE          shift and go to state 22
    RECT            shift and go to state 15
    POLYGON         shift and go to state 11

    rect_g                         shift and go to state 18
    circle_g                       shift and go to state 12
    shape                          shift and go to state 38
    animation_param                shift and go to state 41
    polygon_g                      shift and go to state 10

state 26

    (41) expression -> RANDOM . ( expression )
    (42) expression -> RANDOM . ( expression , expression )

    (               shift and go to state 42


state 27

    (12) statement -> PRINT expression .
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ;               reduce using rule 12 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 28

    (32) expression -> NUMBER .

    ADD_OP          reduce using rule 32 (expression -> NUMBER .)
    MUL_OP          reduce using rule 32 (expression -> NUMBER .)
    ;               reduce using rule 32 (expression -> NUMBER .)
    )               reduce using rule 32 (expression -> NUMBER .)
    ,               reduce using rule 32 (expression -> NUMBER .)


state 29

    (35) expression -> ADD_OP . expression
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 45

state 30

    (33) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 33 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 33 (expression -> IDENTIFIER .)
    ;               reduce using rule 33 (expression -> IDENTIFIER .)
    )               reduce using rule 33 (expression -> IDENTIFIER .)
    ,               reduce using rule 33 (expression -> IDENTIFIER .)


state 31

    (34) expression -> ( . expression )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 46

state 32

    (24) polygon_g -> POLYGON { . point_expression , ( points_expression ) , color_expression }
    (27) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 47

    point_expression               shift and go to state 48

state 33

    (23) rect_g -> RECT { . point_expression , size_expression , color_expression }
    (27) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 47

    point_expression               shift and go to state 49

state 34

    (40) assignation -> IDENTIFIER = . expression
    (39) assignation_shape -> IDENTIFIER = . shape
    (38) assignation_color -> IDENTIFIER = . color_expression
    (37) assignation_point -> IDENTIFIER = . point_expression
    (36) assignation_size -> IDENTIFIER = . size_expression
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )
    (19) shape -> . circle_g
    (20) shape -> . rect_g
    (21) shape -> . polygon_g
    (29) color_expression -> . COLOR ( expression , expression , expression )
    (27) point_expression -> . POINT ( expression , expression )
    (28) size_expression -> . SIZE ( expression , expression )
    (22) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (23) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (24) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26
    COLOR           shift and go to state 50
    POINT           shift and go to state 47
    SIZE            shift and go to state 55
    CIRCLE          shift and go to state 22
    RECT            shift and go to state 15
    POLYGON         shift and go to state 11

    expression                     shift and go to state 52
    rect_g                         shift and go to state 18
    circle_g                       shift and go to state 12
    shape                          shift and go to state 53
    point_expression               shift and go to state 54
    size_expression                shift and go to state 56
    polygon_g                      shift and go to state 10
    color_expression               shift and go to state 51

state 35

    (2) subprogram -> statement ; .
    (3) subprogram -> statement ; . subprogram
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . assignation_size
    (9) statement -> . structure
    (10) statement -> . shape
    (11) statement -> . animation
    (12) statement -> . PRINT expression
    (40) assignation -> . IDENTIFIER = expression
    (39) assignation_shape -> . IDENTIFIER = shape
    (38) assignation_color -> . IDENTIFIER = color_expression
    (37) assignation_point -> . IDENTIFIER = point_expression
    (36) assignation_size -> . IDENTIFIER = size_expression
    (13) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (19) shape -> . circle_g
    (20) shape -> . rect_g
    (21) shape -> . polygon_g
    (14) animation -> . translation
    (22) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (23) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (24) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }
    (15) translation -> . TRANSLATE ( animation_param , point_expression )
    (16) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    $end            reduce using rule 2 (subprogram -> statement ; .)
    }               reduce using rule 2 (subprogram -> statement ; .)
    PRINT           shift and go to state 7
    IDENTIFIER      shift and go to state 16
    FOR             shift and go to state 21
    CIRCLE          shift and go to state 22
    RECT            shift and go to state 15
    POLYGON         shift and go to state 11
    TRANSLATE       shift and go to state 5
    ROTATE          shift and go to state 4

    assignation_size               shift and go to state 17
    assignation                    shift and go to state 2
    rect_g                         shift and go to state 18
    statement                      shift and go to state 19
    assignation_point              shift and go to state 20
    assignation_color              shift and go to state 8
    animation                      shift and go to state 9
    polygon_g                      shift and go to state 10
    assignation_shape              shift and go to state 6
    circle_g                       shift and go to state 12
    shape                          shift and go to state 13
    structure                      shift and go to state 14
    subprogram                     shift and go to state 57
    translation                    shift and go to state 23

state 36

    (13) structure -> FOR ( . expression , expression , expression ) { subprogram }
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 58

state 37

    (22) circle_g -> CIRCLE { . point_expression , RADIUS ( expression ) , color_expression }
    (27) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 47

    point_expression               shift and go to state 59

state 38

    (18) animation_param -> shape .

    ,               reduce using rule 18 (animation_param -> shape .)


state 39

    (17) animation_param -> IDENTIFIER .

    ,               reduce using rule 17 (animation_param -> IDENTIFIER .)


state 40

    (16) translation -> ROTATE ( animation_param . , expression , AROUND ( point_expression ) )

    ,               shift and go to state 60


state 41

    (15) translation -> TRANSLATE ( animation_param . , point_expression )

    ,               shift and go to state 61


state 42

    (41) expression -> RANDOM ( . expression )
    (42) expression -> RANDOM ( . expression , expression )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 62

state 43

    (31) expression -> expression MUL_OP . expression
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 63

state 44

    (30) expression -> expression ADD_OP . expression
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 64

state 45

    (35) expression -> ADD_OP expression .
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 35 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 35 (expression -> ADD_OP expression .)
    ;               reduce using rule 35 (expression -> ADD_OP expression .)
    )               reduce using rule 35 (expression -> ADD_OP expression .)
    ,               reduce using rule 35 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 44 ]
  ! MUL_OP          [ shift and go to state 43 ]


state 46

    (34) expression -> ( expression . )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    )               shift and go to state 65
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 47

    (27) point_expression -> POINT . ( expression , expression )

    (               shift and go to state 66


state 48

    (24) polygon_g -> POLYGON { point_expression . , ( points_expression ) , color_expression }

    ,               shift and go to state 67


state 49

    (23) rect_g -> RECT { point_expression . , size_expression , color_expression }

    ,               shift and go to state 68


state 50

    (29) color_expression -> COLOR . ( expression , expression , expression )

    (               shift and go to state 69


state 51

    (38) assignation_color -> IDENTIFIER = color_expression .

    ;               reduce using rule 38 (assignation_color -> IDENTIFIER = color_expression .)


state 52

    (40) assignation -> IDENTIFIER = expression .
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ;               reduce using rule 40 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 53

    (39) assignation_shape -> IDENTIFIER = shape .

    ;               reduce using rule 39 (assignation_shape -> IDENTIFIER = shape .)


state 54

    (37) assignation_point -> IDENTIFIER = point_expression .

    ;               reduce using rule 37 (assignation_point -> IDENTIFIER = point_expression .)


state 55

    (28) size_expression -> SIZE . ( expression , expression )

    (               shift and go to state 70


state 56

    (36) assignation_size -> IDENTIFIER = size_expression .

    ;               reduce using rule 36 (assignation_size -> IDENTIFIER = size_expression .)


state 57

    (3) subprogram -> statement ; subprogram .

    $end            reduce using rule 3 (subprogram -> statement ; subprogram .)
    }               reduce using rule 3 (subprogram -> statement ; subprogram .)


state 58

    (13) structure -> FOR ( expression . , expression , expression ) { subprogram }
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ,               shift and go to state 71
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 59

    (22) circle_g -> CIRCLE { point_expression . , RADIUS ( expression ) , color_expression }

    ,               shift and go to state 72


state 60

    (16) translation -> ROTATE ( animation_param , . expression , AROUND ( point_expression ) )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 73

state 61

    (15) translation -> TRANSLATE ( animation_param , . point_expression )
    (27) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 47

    point_expression               shift and go to state 74

state 62

    (41) expression -> RANDOM ( expression . )
    (42) expression -> RANDOM ( expression . , expression )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    )               shift and go to state 76
    ,               shift and go to state 75
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 63

    (31) expression -> expression MUL_OP expression .
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 31 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 31 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 31 (expression -> expression MUL_OP expression .)
    )               reduce using rule 31 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 31 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 44 ]
  ! MUL_OP          [ shift and go to state 43 ]


state 64

    (30) expression -> expression ADD_OP expression .
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 30 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 30 (expression -> expression ADD_OP expression .)
    )               reduce using rule 30 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 30 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 43

  ! MUL_OP          [ reduce using rule 30 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 44 ]


state 65

    (34) expression -> ( expression ) .

    ADD_OP          reduce using rule 34 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 34 (expression -> ( expression ) .)
    ;               reduce using rule 34 (expression -> ( expression ) .)
    )               reduce using rule 34 (expression -> ( expression ) .)
    ,               reduce using rule 34 (expression -> ( expression ) .)


state 66

    (27) point_expression -> POINT ( . expression , expression )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 77

state 67

    (24) polygon_g -> POLYGON { point_expression , . ( points_expression ) , color_expression }

    (               shift and go to state 78


state 68

    (23) rect_g -> RECT { point_expression , . size_expression , color_expression }
    (28) size_expression -> . SIZE ( expression , expression )

    SIZE            shift and go to state 55

    size_expression                shift and go to state 79

state 69

    (29) color_expression -> COLOR ( . expression , expression , expression )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 80

state 70

    (28) size_expression -> SIZE ( . expression , expression )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 81

state 71

    (13) structure -> FOR ( expression , . expression , expression ) { subprogram }
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 82

state 72

    (22) circle_g -> CIRCLE { point_expression , . RADIUS ( expression ) , color_expression }

    RADIUS          shift and go to state 83


state 73

    (16) translation -> ROTATE ( animation_param , expression . , AROUND ( point_expression ) )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ,               shift and go to state 84
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 74

    (15) translation -> TRANSLATE ( animation_param , point_expression . )

    )               shift and go to state 85


state 75

    (42) expression -> RANDOM ( expression , . expression )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 86

state 76

    (41) expression -> RANDOM ( expression ) .

    ADD_OP          reduce using rule 41 (expression -> RANDOM ( expression ) .)
    MUL_OP          reduce using rule 41 (expression -> RANDOM ( expression ) .)
    ;               reduce using rule 41 (expression -> RANDOM ( expression ) .)
    )               reduce using rule 41 (expression -> RANDOM ( expression ) .)
    ,               reduce using rule 41 (expression -> RANDOM ( expression ) .)


state 77

    (27) point_expression -> POINT ( expression . , expression )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ,               shift and go to state 87
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 78

    (24) polygon_g -> POLYGON { point_expression , ( . points_expression ) , color_expression }
    (25) points_expression -> . point_expression
    (26) points_expression -> . point_expression , points_expression
    (27) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 47

    point_expression               shift and go to state 88
    points_expression              shift and go to state 89

state 79

    (23) rect_g -> RECT { point_expression , size_expression . , color_expression }

    ,               shift and go to state 90


state 80

    (29) color_expression -> COLOR ( expression . , expression , expression )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ,               shift and go to state 91
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 81

    (28) size_expression -> SIZE ( expression . , expression )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ,               shift and go to state 92
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 82

    (13) structure -> FOR ( expression , expression . , expression ) { subprogram }
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ,               shift and go to state 93
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 83

    (22) circle_g -> CIRCLE { point_expression , RADIUS . ( expression ) , color_expression }

    (               shift and go to state 94


state 84

    (16) translation -> ROTATE ( animation_param , expression , . AROUND ( point_expression ) )

    AROUND          shift and go to state 95


state 85

    (15) translation -> TRANSLATE ( animation_param , point_expression ) .

    ;               reduce using rule 15 (translation -> TRANSLATE ( animation_param , point_expression ) .)


state 86

    (42) expression -> RANDOM ( expression , expression . )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    )               shift and go to state 96
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 87

    (27) point_expression -> POINT ( expression , . expression )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 97

state 88

    (25) points_expression -> point_expression .
    (26) points_expression -> point_expression . , points_expression

    )               reduce using rule 25 (points_expression -> point_expression .)
    ,               shift and go to state 98


state 89

    (24) polygon_g -> POLYGON { point_expression , ( points_expression . ) , color_expression }

    )               shift and go to state 99


state 90

    (23) rect_g -> RECT { point_expression , size_expression , . color_expression }
    (29) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 50

    color_expression               shift and go to state 100

state 91

    (29) color_expression -> COLOR ( expression , . expression , expression )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 101

state 92

    (28) size_expression -> SIZE ( expression , . expression )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 102

state 93

    (13) structure -> FOR ( expression , expression , . expression ) { subprogram }
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 103

state 94

    (22) circle_g -> CIRCLE { point_expression , RADIUS ( . expression ) , color_expression }
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 104

state 95

    (16) translation -> ROTATE ( animation_param , expression , AROUND . ( point_expression ) )

    (               shift and go to state 105


state 96

    (42) expression -> RANDOM ( expression , expression ) .

    ADD_OP          reduce using rule 42 (expression -> RANDOM ( expression , expression ) .)
    MUL_OP          reduce using rule 42 (expression -> RANDOM ( expression , expression ) .)
    ;               reduce using rule 42 (expression -> RANDOM ( expression , expression ) .)
    )               reduce using rule 42 (expression -> RANDOM ( expression , expression ) .)
    ,               reduce using rule 42 (expression -> RANDOM ( expression , expression ) .)


state 97

    (27) point_expression -> POINT ( expression , expression . )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    )               shift and go to state 106
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 98

    (26) points_expression -> point_expression , . points_expression
    (25) points_expression -> . point_expression
    (26) points_expression -> . point_expression , points_expression
    (27) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 47

    point_expression               shift and go to state 88
    points_expression              shift and go to state 107

state 99

    (24) polygon_g -> POLYGON { point_expression , ( points_expression ) . , color_expression }

    ,               shift and go to state 108


state 100

    (23) rect_g -> RECT { point_expression , size_expression , color_expression . }

    }               shift and go to state 109


state 101

    (29) color_expression -> COLOR ( expression , expression . , expression )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    ,               shift and go to state 110
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 102

    (28) size_expression -> SIZE ( expression , expression . )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    )               shift and go to state 111
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 103

    (13) structure -> FOR ( expression , expression , expression . ) { subprogram }
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    )               shift and go to state 112
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 104

    (22) circle_g -> CIRCLE { point_expression , RADIUS ( expression . ) , color_expression }
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    )               shift and go to state 113
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 105

    (16) translation -> ROTATE ( animation_param , expression , AROUND ( . point_expression ) )
    (27) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 47

    point_expression               shift and go to state 114

state 106

    (27) point_expression -> POINT ( expression , expression ) .

    ;               reduce using rule 27 (point_expression -> POINT ( expression , expression ) .)
    ,               reduce using rule 27 (point_expression -> POINT ( expression , expression ) .)
    )               reduce using rule 27 (point_expression -> POINT ( expression , expression ) .)


state 107

    (26) points_expression -> point_expression , points_expression .

    )               reduce using rule 26 (points_expression -> point_expression , points_expression .)


state 108

    (24) polygon_g -> POLYGON { point_expression , ( points_expression ) , . color_expression }
    (29) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 50

    color_expression               shift and go to state 115

state 109

    (23) rect_g -> RECT { point_expression , size_expression , color_expression } .

    ;               reduce using rule 23 (rect_g -> RECT { point_expression , size_expression , color_expression } .)
    ,               reduce using rule 23 (rect_g -> RECT { point_expression , size_expression , color_expression } .)


state 110

    (29) color_expression -> COLOR ( expression , expression , . expression )
    (30) expression -> . expression ADD_OP expression
    (31) expression -> . expression MUL_OP expression
    (32) expression -> . NUMBER
    (33) expression -> . IDENTIFIER
    (34) expression -> . ( expression )
    (35) expression -> . ADD_OP expression
    (41) expression -> . RANDOM ( expression )
    (42) expression -> . RANDOM ( expression , expression )

    NUMBER          shift and go to state 28
    IDENTIFIER      shift and go to state 30
    (               shift and go to state 31
    ADD_OP          shift and go to state 29
    RANDOM          shift and go to state 26

    expression                     shift and go to state 116

state 111

    (28) size_expression -> SIZE ( expression , expression ) .

    ;               reduce using rule 28 (size_expression -> SIZE ( expression , expression ) .)
    ,               reduce using rule 28 (size_expression -> SIZE ( expression , expression ) .)


state 112

    (13) structure -> FOR ( expression , expression , expression ) . { subprogram }

    {               shift and go to state 117


state 113

    (22) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) . , color_expression }

    ,               shift and go to state 118


state 114

    (16) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression . ) )

    )               shift and go to state 119


state 115

    (24) polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression . }

    }               shift and go to state 120


state 116

    (29) color_expression -> COLOR ( expression , expression , expression . )
    (30) expression -> expression . ADD_OP expression
    (31) expression -> expression . MUL_OP expression

    )               shift and go to state 121
    ADD_OP          shift and go to state 44
    MUL_OP          shift and go to state 43


state 117

    (13) structure -> FOR ( expression , expression , expression ) { . subprogram }
    (2) subprogram -> . statement ;
    (3) subprogram -> . statement ; subprogram
    (4) statement -> . assignation
    (5) statement -> . assignation_shape
    (6) statement -> . assignation_color
    (7) statement -> . assignation_point
    (8) statement -> . assignation_size
    (9) statement -> . structure
    (10) statement -> . shape
    (11) statement -> . animation
    (12) statement -> . PRINT expression
    (40) assignation -> . IDENTIFIER = expression
    (39) assignation_shape -> . IDENTIFIER = shape
    (38) assignation_color -> . IDENTIFIER = color_expression
    (37) assignation_point -> . IDENTIFIER = point_expression
    (36) assignation_size -> . IDENTIFIER = size_expression
    (13) structure -> . FOR ( expression , expression , expression ) { subprogram }
    (19) shape -> . circle_g
    (20) shape -> . rect_g
    (21) shape -> . polygon_g
    (14) animation -> . translation
    (22) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (23) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (24) polygon_g -> . POLYGON { point_expression , ( points_expression ) , color_expression }
    (15) translation -> . TRANSLATE ( animation_param , point_expression )
    (16) translation -> . ROTATE ( animation_param , expression , AROUND ( point_expression ) )

    PRINT           shift and go to state 7
    IDENTIFIER      shift and go to state 16
    FOR             shift and go to state 21
    CIRCLE          shift and go to state 22
    RECT            shift and go to state 15
    POLYGON         shift and go to state 11
    TRANSLATE       shift and go to state 5
    ROTATE          shift and go to state 4

    assignation_size               shift and go to state 17
    assignation                    shift and go to state 2
    rect_g                         shift and go to state 18
    statement                      shift and go to state 19
    assignation_point              shift and go to state 20
    assignation_color              shift and go to state 8
    animation                      shift and go to state 9
    polygon_g                      shift and go to state 10
    assignation_shape              shift and go to state 6
    circle_g                       shift and go to state 12
    shape                          shift and go to state 13
    structure                      shift and go to state 14
    subprogram                     shift and go to state 122
    translation                    shift and go to state 23

state 118

    (22) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , . color_expression }
    (29) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 50

    color_expression               shift and go to state 123

state 119

    (16) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) . )

    )               shift and go to state 124


state 120

    (24) polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression } .

    ;               reduce using rule 24 (polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression } .)
    ,               reduce using rule 24 (polygon_g -> POLYGON { point_expression , ( points_expression ) , color_expression } .)


state 121

    (29) color_expression -> COLOR ( expression , expression , expression ) .

    ;               reduce using rule 29 (color_expression -> COLOR ( expression , expression , expression ) .)
    }               reduce using rule 29 (color_expression -> COLOR ( expression , expression , expression ) .)


state 122

    (13) structure -> FOR ( expression , expression , expression ) { subprogram . }

    }               shift and go to state 125


state 123

    (22) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression . }

    }               shift and go to state 126


state 124

    (16) translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) ) .

    ;               reduce using rule 16 (translation -> ROTATE ( animation_param , expression , AROUND ( point_expression ) ) .)


state 125

    (13) structure -> FOR ( expression , expression , expression ) { subprogram } .

    ;               reduce using rule 13 (structure -> FOR ( expression , expression , expression ) { subprogram } .)


state 126

    (22) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .

    ,               reduce using rule 22 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)
    ;               reduce using rule 22 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)

