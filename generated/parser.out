Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement ; program
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> shape
Rule 6     statement -> animation
Rule 7     statement -> PRINT expression
Rule 8     structure -> WHILE expression { program }
Rule 9     animation -> translation
Rule 10    translation -> TRANSLATE ( IDENTIFIER , point_expression )
Rule 11    translation -> ROTATE ( IDENTIFIER , expression )
Rule 12    shape -> circle_g
Rule 13    shape -> rect_g
Rule 14    circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
Rule 15    rect_g -> RECT { point_expression , size_expression , color_expression }
Rule 16    point_expression -> POINT ( expression , expression )
Rule 17    size_expression -> SIZE ( expression , expression )
Rule 18    color_expression -> COLOR ( expression , expression , expression )
Rule 19    expression -> expression ADD_OP expression
Rule 20    expression -> expression MUL_OP expression
Rule 21    expression -> NUMBER
Rule 22    expression -> IDENTIFIER
Rule 23    expression -> ( expression )
Rule 24    expression -> RANDOM ( expression )
Rule 25    expression -> RANDOM ( expression , expression )
Rule 26    expression -> ADD_OP expression
Rule 27    assignation -> IDENTIFIER = assign_expression
Rule 28    assign_expression -> expression
Rule 29    assign_expression -> shape

Terminals, with rules where they appear

(                    : 10 11 14 16 17 18 23 24 25
)                    : 10 11 14 16 17 18 23 24 25
,                    : 10 11 14 14 15 15 16 17 18 18 25
;                    : 2
=                    : 27
ADD_OP               : 19 26
CIRCLE               : 14
COLOR                : 18
IDENTIFIER           : 10 11 22 27
MUL_OP               : 20
NUMBER               : 21
POINT                : 16
PRINT                : 7
RADIUS               : 14
RANDOM               : 24 25
RECT                 : 15
ROTATE               : 11
SIZE                 : 17
TRANSLATE            : 10
WHILE                : 8
error                : 
{                    : 8 14 15
}                    : 8 14 15

Nonterminals, with rules where they appear

animation            : 6
assign_expression    : 27
assignation          : 3
circle_g             : 12
color_expression     : 14 15
expression           : 7 8 11 14 16 16 17 17 18 18 18 19 19 20 20 23 24 25 25 26 28
point_expression     : 10 14 15
program              : 2 8 0
rect_g               : 13
shape                : 5 29
size_expression      : 15
statement            : 1 2
structure            : 4
translation          : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . shape
    (6) statement -> . animation
    (7) statement -> . PRINT expression
    (27) assignation -> . IDENTIFIER = assign_expression
    (8) structure -> . WHILE expression { program }
    (12) shape -> . circle_g
    (13) shape -> . rect_g
    (9) animation -> . translation
    (14) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (15) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (10) translation -> . TRANSLATE ( IDENTIFIER , point_expression )
    (11) translation -> . ROTATE ( IDENTIFIER , expression )

    PRINT           shift and go to state 7
    IDENTIFIER      shift and go to state 8
    WHILE           shift and go to state 9
    CIRCLE          shift and go to state 13
    RECT            shift and go to state 14
    TRANSLATE       shift and go to state 15
    ROTATE          shift and go to state 16

    program                        shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    shape                          shift and go to state 5
    animation                      shift and go to state 6
    circle_g                       shift and go to state 10
    rect_g                         shift and go to state 11
    translation                    shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . ; program

    $end            reduce using rule 1 (program -> statement .)
    }               reduce using rule 1 (program -> statement .)
    ;               shift and go to state 17


state 3

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 5

    (5) statement -> shape .

    ;               reduce using rule 5 (statement -> shape .)
    $end            reduce using rule 5 (statement -> shape .)
    }               reduce using rule 5 (statement -> shape .)


state 6

    (6) statement -> animation .

    ;               reduce using rule 6 (statement -> animation .)
    $end            reduce using rule 6 (statement -> animation .)
    }               reduce using rule 6 (statement -> animation .)


state 7

    (7) statement -> PRINT . expression
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 18

state 8

    (27) assignation -> IDENTIFIER . = assign_expression

    =               shift and go to state 24


state 9

    (8) structure -> WHILE . expression { program }
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 25

state 10

    (12) shape -> circle_g .

    ;               reduce using rule 12 (shape -> circle_g .)
    $end            reduce using rule 12 (shape -> circle_g .)
    }               reduce using rule 12 (shape -> circle_g .)


state 11

    (13) shape -> rect_g .

    ;               reduce using rule 13 (shape -> rect_g .)
    $end            reduce using rule 13 (shape -> rect_g .)
    }               reduce using rule 13 (shape -> rect_g .)


state 12

    (9) animation -> translation .

    ;               reduce using rule 9 (animation -> translation .)
    $end            reduce using rule 9 (animation -> translation .)
    }               reduce using rule 9 (animation -> translation .)


state 13

    (14) circle_g -> CIRCLE . { point_expression , RADIUS ( expression ) , color_expression }

    {               shift and go to state 26


state 14

    (15) rect_g -> RECT . { point_expression , size_expression , color_expression }

    {               shift and go to state 27


state 15

    (10) translation -> TRANSLATE . ( IDENTIFIER , point_expression )

    (               shift and go to state 28


state 16

    (11) translation -> ROTATE . ( IDENTIFIER , expression )

    (               shift and go to state 29


state 17

    (2) program -> statement ; . program
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . shape
    (6) statement -> . animation
    (7) statement -> . PRINT expression
    (27) assignation -> . IDENTIFIER = assign_expression
    (8) structure -> . WHILE expression { program }
    (12) shape -> . circle_g
    (13) shape -> . rect_g
    (9) animation -> . translation
    (14) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (15) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (10) translation -> . TRANSLATE ( IDENTIFIER , point_expression )
    (11) translation -> . ROTATE ( IDENTIFIER , expression )

    PRINT           shift and go to state 7
    IDENTIFIER      shift and go to state 8
    WHILE           shift and go to state 9
    CIRCLE          shift and go to state 13
    RECT            shift and go to state 14
    TRANSLATE       shift and go to state 15
    ROTATE          shift and go to state 16

    statement                      shift and go to state 2
    program                        shift and go to state 30
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    shape                          shift and go to state 5
    animation                      shift and go to state 6
    circle_g                       shift and go to state 10
    rect_g                         shift and go to state 11
    translation                    shift and go to state 12

state 18

    (7) statement -> PRINT expression .
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ;               reduce using rule 7 (statement -> PRINT expression .)
    $end            reduce using rule 7 (statement -> PRINT expression .)
    }               reduce using rule 7 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 19

    (26) expression -> ADD_OP . expression
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 33

state 20

    (21) expression -> NUMBER .

    ADD_OP          reduce using rule 21 (expression -> NUMBER .)
    MUL_OP          reduce using rule 21 (expression -> NUMBER .)
    ;               reduce using rule 21 (expression -> NUMBER .)
    $end            reduce using rule 21 (expression -> NUMBER .)
    }               reduce using rule 21 (expression -> NUMBER .)
    {               reduce using rule 21 (expression -> NUMBER .)
    )               reduce using rule 21 (expression -> NUMBER .)
    ,               reduce using rule 21 (expression -> NUMBER .)


state 21

    (22) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 22 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 22 (expression -> IDENTIFIER .)
    ;               reduce using rule 22 (expression -> IDENTIFIER .)
    $end            reduce using rule 22 (expression -> IDENTIFIER .)
    }               reduce using rule 22 (expression -> IDENTIFIER .)
    {               reduce using rule 22 (expression -> IDENTIFIER .)
    )               reduce using rule 22 (expression -> IDENTIFIER .)
    ,               reduce using rule 22 (expression -> IDENTIFIER .)


state 22

    (23) expression -> ( . expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 34

state 23

    (24) expression -> RANDOM . ( expression )
    (25) expression -> RANDOM . ( expression , expression )

    (               shift and go to state 35


state 24

    (27) assignation -> IDENTIFIER = . assign_expression
    (28) assign_expression -> . expression
    (29) assign_expression -> . shape
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression
    (12) shape -> . circle_g
    (13) shape -> . rect_g
    (14) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (15) rect_g -> . RECT { point_expression , size_expression , color_expression }

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19
    CIRCLE          shift and go to state 13
    RECT            shift and go to state 14

    assign_expression              shift and go to state 36
    expression                     shift and go to state 37
    shape                          shift and go to state 38
    circle_g                       shift and go to state 10
    rect_g                         shift and go to state 11

state 25

    (8) structure -> WHILE expression . { program }
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    {               shift and go to state 39
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 26

    (14) circle_g -> CIRCLE { . point_expression , RADIUS ( expression ) , color_expression }
    (16) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 41

    point_expression               shift and go to state 40

state 27

    (15) rect_g -> RECT { . point_expression , size_expression , color_expression }
    (16) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 41

    point_expression               shift and go to state 42

state 28

    (10) translation -> TRANSLATE ( . IDENTIFIER , point_expression )

    IDENTIFIER      shift and go to state 43


state 29

    (11) translation -> ROTATE ( . IDENTIFIER , expression )

    IDENTIFIER      shift and go to state 44


state 30

    (2) program -> statement ; program .

    $end            reduce using rule 2 (program -> statement ; program .)
    }               reduce using rule 2 (program -> statement ; program .)


state 31

    (19) expression -> expression ADD_OP . expression
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 45

state 32

    (20) expression -> expression MUL_OP . expression
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 46

state 33

    (26) expression -> ADD_OP expression .
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 26 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 26 (expression -> ADD_OP expression .)
    ;               reduce using rule 26 (expression -> ADD_OP expression .)
    $end            reduce using rule 26 (expression -> ADD_OP expression .)
    }               reduce using rule 26 (expression -> ADD_OP expression .)
    {               reduce using rule 26 (expression -> ADD_OP expression .)
    )               reduce using rule 26 (expression -> ADD_OP expression .)
    ,               reduce using rule 26 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 31 ]
  ! MUL_OP          [ shift and go to state 32 ]


state 34

    (23) expression -> ( expression . )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    )               shift and go to state 47
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 35

    (24) expression -> RANDOM ( . expression )
    (25) expression -> RANDOM ( . expression , expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 48

state 36

    (27) assignation -> IDENTIFIER = assign_expression .

    ;               reduce using rule 27 (assignation -> IDENTIFIER = assign_expression .)
    $end            reduce using rule 27 (assignation -> IDENTIFIER = assign_expression .)
    }               reduce using rule 27 (assignation -> IDENTIFIER = assign_expression .)


state 37

    (28) assign_expression -> expression .
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ;               reduce using rule 28 (assign_expression -> expression .)
    $end            reduce using rule 28 (assign_expression -> expression .)
    }               reduce using rule 28 (assign_expression -> expression .)
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 38

    (29) assign_expression -> shape .

    ;               reduce using rule 29 (assign_expression -> shape .)
    $end            reduce using rule 29 (assign_expression -> shape .)
    }               reduce using rule 29 (assign_expression -> shape .)


state 39

    (8) structure -> WHILE expression { . program }
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . shape
    (6) statement -> . animation
    (7) statement -> . PRINT expression
    (27) assignation -> . IDENTIFIER = assign_expression
    (8) structure -> . WHILE expression { program }
    (12) shape -> . circle_g
    (13) shape -> . rect_g
    (9) animation -> . translation
    (14) circle_g -> . CIRCLE { point_expression , RADIUS ( expression ) , color_expression }
    (15) rect_g -> . RECT { point_expression , size_expression , color_expression }
    (10) translation -> . TRANSLATE ( IDENTIFIER , point_expression )
    (11) translation -> . ROTATE ( IDENTIFIER , expression )

    PRINT           shift and go to state 7
    IDENTIFIER      shift and go to state 8
    WHILE           shift and go to state 9
    CIRCLE          shift and go to state 13
    RECT            shift and go to state 14
    TRANSLATE       shift and go to state 15
    ROTATE          shift and go to state 16

    program                        shift and go to state 49
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    shape                          shift and go to state 5
    animation                      shift and go to state 6
    circle_g                       shift and go to state 10
    rect_g                         shift and go to state 11
    translation                    shift and go to state 12

state 40

    (14) circle_g -> CIRCLE { point_expression . , RADIUS ( expression ) , color_expression }

    ,               shift and go to state 50


state 41

    (16) point_expression -> POINT . ( expression , expression )

    (               shift and go to state 51


state 42

    (15) rect_g -> RECT { point_expression . , size_expression , color_expression }

    ,               shift and go to state 52


state 43

    (10) translation -> TRANSLATE ( IDENTIFIER . , point_expression )

    ,               shift and go to state 53


state 44

    (11) translation -> ROTATE ( IDENTIFIER . , expression )

    ,               shift and go to state 54


state 45

    (19) expression -> expression ADD_OP expression .
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 19 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 19 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 19 (expression -> expression ADD_OP expression .)
    }               reduce using rule 19 (expression -> expression ADD_OP expression .)
    {               reduce using rule 19 (expression -> expression ADD_OP expression .)
    )               reduce using rule 19 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 19 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 32

  ! MUL_OP          [ reduce using rule 19 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 31 ]


state 46

    (20) expression -> expression MUL_OP expression .
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 20 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 20 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 20 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 20 (expression -> expression MUL_OP expression .)
    }               reduce using rule 20 (expression -> expression MUL_OP expression .)
    {               reduce using rule 20 (expression -> expression MUL_OP expression .)
    )               reduce using rule 20 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 20 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 31 ]
  ! MUL_OP          [ shift and go to state 32 ]


state 47

    (23) expression -> ( expression ) .

    ADD_OP          reduce using rule 23 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 23 (expression -> ( expression ) .)
    ;               reduce using rule 23 (expression -> ( expression ) .)
    $end            reduce using rule 23 (expression -> ( expression ) .)
    }               reduce using rule 23 (expression -> ( expression ) .)
    {               reduce using rule 23 (expression -> ( expression ) .)
    )               reduce using rule 23 (expression -> ( expression ) .)
    ,               reduce using rule 23 (expression -> ( expression ) .)


state 48

    (24) expression -> RANDOM ( expression . )
    (25) expression -> RANDOM ( expression . , expression )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    )               shift and go to state 55
    ,               shift and go to state 56
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 49

    (8) structure -> WHILE expression { program . }

    }               shift and go to state 57


state 50

    (14) circle_g -> CIRCLE { point_expression , . RADIUS ( expression ) , color_expression }

    RADIUS          shift and go to state 58


state 51

    (16) point_expression -> POINT ( . expression , expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 59

state 52

    (15) rect_g -> RECT { point_expression , . size_expression , color_expression }
    (17) size_expression -> . SIZE ( expression , expression )

    SIZE            shift and go to state 61

    size_expression                shift and go to state 60

state 53

    (10) translation -> TRANSLATE ( IDENTIFIER , . point_expression )
    (16) point_expression -> . POINT ( expression , expression )

    POINT           shift and go to state 41

    point_expression               shift and go to state 62

state 54

    (11) translation -> ROTATE ( IDENTIFIER , . expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 63

state 55

    (24) expression -> RANDOM ( expression ) .

    ADD_OP          reduce using rule 24 (expression -> RANDOM ( expression ) .)
    MUL_OP          reduce using rule 24 (expression -> RANDOM ( expression ) .)
    ;               reduce using rule 24 (expression -> RANDOM ( expression ) .)
    $end            reduce using rule 24 (expression -> RANDOM ( expression ) .)
    }               reduce using rule 24 (expression -> RANDOM ( expression ) .)
    {               reduce using rule 24 (expression -> RANDOM ( expression ) .)
    )               reduce using rule 24 (expression -> RANDOM ( expression ) .)
    ,               reduce using rule 24 (expression -> RANDOM ( expression ) .)


state 56

    (25) expression -> RANDOM ( expression , . expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 64

state 57

    (8) structure -> WHILE expression { program } .

    ;               reduce using rule 8 (structure -> WHILE expression { program } .)
    $end            reduce using rule 8 (structure -> WHILE expression { program } .)
    }               reduce using rule 8 (structure -> WHILE expression { program } .)


state 58

    (14) circle_g -> CIRCLE { point_expression , RADIUS . ( expression ) , color_expression }

    (               shift and go to state 65


state 59

    (16) point_expression -> POINT ( expression . , expression )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ,               shift and go to state 66
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 60

    (15) rect_g -> RECT { point_expression , size_expression . , color_expression }

    ,               shift and go to state 67


state 61

    (17) size_expression -> SIZE . ( expression , expression )

    (               shift and go to state 68


state 62

    (10) translation -> TRANSLATE ( IDENTIFIER , point_expression . )

    )               shift and go to state 69


state 63

    (11) translation -> ROTATE ( IDENTIFIER , expression . )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    )               shift and go to state 70
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 64

    (25) expression -> RANDOM ( expression , expression . )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    )               shift and go to state 71
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 65

    (14) circle_g -> CIRCLE { point_expression , RADIUS ( . expression ) , color_expression }
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 72

state 66

    (16) point_expression -> POINT ( expression , . expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 73

state 67

    (15) rect_g -> RECT { point_expression , size_expression , . color_expression }
    (18) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 75

    color_expression               shift and go to state 74

state 68

    (17) size_expression -> SIZE ( . expression , expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 76

state 69

    (10) translation -> TRANSLATE ( IDENTIFIER , point_expression ) .

    ;               reduce using rule 10 (translation -> TRANSLATE ( IDENTIFIER , point_expression ) .)
    $end            reduce using rule 10 (translation -> TRANSLATE ( IDENTIFIER , point_expression ) .)
    }               reduce using rule 10 (translation -> TRANSLATE ( IDENTIFIER , point_expression ) .)


state 70

    (11) translation -> ROTATE ( IDENTIFIER , expression ) .

    ;               reduce using rule 11 (translation -> ROTATE ( IDENTIFIER , expression ) .)
    $end            reduce using rule 11 (translation -> ROTATE ( IDENTIFIER , expression ) .)
    }               reduce using rule 11 (translation -> ROTATE ( IDENTIFIER , expression ) .)


state 71

    (25) expression -> RANDOM ( expression , expression ) .

    ADD_OP          reduce using rule 25 (expression -> RANDOM ( expression , expression ) .)
    MUL_OP          reduce using rule 25 (expression -> RANDOM ( expression , expression ) .)
    ;               reduce using rule 25 (expression -> RANDOM ( expression , expression ) .)
    $end            reduce using rule 25 (expression -> RANDOM ( expression , expression ) .)
    }               reduce using rule 25 (expression -> RANDOM ( expression , expression ) .)
    {               reduce using rule 25 (expression -> RANDOM ( expression , expression ) .)
    )               reduce using rule 25 (expression -> RANDOM ( expression , expression ) .)
    ,               reduce using rule 25 (expression -> RANDOM ( expression , expression ) .)


state 72

    (14) circle_g -> CIRCLE { point_expression , RADIUS ( expression . ) , color_expression }
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    )               shift and go to state 77
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 73

    (16) point_expression -> POINT ( expression , expression . )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    )               shift and go to state 78
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 74

    (15) rect_g -> RECT { point_expression , size_expression , color_expression . }

    }               shift and go to state 79


state 75

    (18) color_expression -> COLOR . ( expression , expression , expression )

    (               shift and go to state 80


state 76

    (17) size_expression -> SIZE ( expression . , expression )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ,               shift and go to state 81
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 77

    (14) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) . , color_expression }

    ,               shift and go to state 82


state 78

    (16) point_expression -> POINT ( expression , expression ) .

    ,               reduce using rule 16 (point_expression -> POINT ( expression , expression ) .)
    )               reduce using rule 16 (point_expression -> POINT ( expression , expression ) .)


state 79

    (15) rect_g -> RECT { point_expression , size_expression , color_expression } .

    ;               reduce using rule 15 (rect_g -> RECT { point_expression , size_expression , color_expression } .)
    $end            reduce using rule 15 (rect_g -> RECT { point_expression , size_expression , color_expression } .)
    }               reduce using rule 15 (rect_g -> RECT { point_expression , size_expression , color_expression } .)


state 80

    (18) color_expression -> COLOR ( . expression , expression , expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 83

state 81

    (17) size_expression -> SIZE ( expression , . expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 84

state 82

    (14) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , . color_expression }
    (18) color_expression -> . COLOR ( expression , expression , expression )

    COLOR           shift and go to state 75

    color_expression               shift and go to state 85

state 83

    (18) color_expression -> COLOR ( expression . , expression , expression )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ,               shift and go to state 86
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 84

    (17) size_expression -> SIZE ( expression , expression . )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    )               shift and go to state 87
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 85

    (14) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression . }

    }               shift and go to state 88


state 86

    (18) color_expression -> COLOR ( expression , . expression , expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 89

state 87

    (17) size_expression -> SIZE ( expression , expression ) .

    ,               reduce using rule 17 (size_expression -> SIZE ( expression , expression ) .)


state 88

    (14) circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .

    ;               reduce using rule 14 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)
    $end            reduce using rule 14 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)
    }               reduce using rule 14 (circle_g -> CIRCLE { point_expression , RADIUS ( expression ) , color_expression } .)


state 89

    (18) color_expression -> COLOR ( expression , expression . , expression )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ,               shift and go to state 90
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 90

    (18) color_expression -> COLOR ( expression , expression , . expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . RANDOM ( expression )
    (25) expression -> . RANDOM ( expression , expression )
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 21
    (               shift and go to state 22
    RANDOM          shift and go to state 23
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 91

state 91

    (18) color_expression -> COLOR ( expression , expression , expression . )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    )               shift and go to state 92
    ADD_OP          shift and go to state 31
    MUL_OP          shift and go to state 32


state 92

    (18) color_expression -> COLOR ( expression , expression , expression ) .

    }               reduce using rule 18 (color_expression -> COLOR ( expression , expression , expression ) .)

