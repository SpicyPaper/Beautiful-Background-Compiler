Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    H
    W

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement ; program
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> shape
Rule 6     statement -> PRINT expression
Rule 7     structure -> WHILE expression { program }
Rule 8     shape -> circle_g
Rule 9     circle_g -> CIRCLE { X : expression , Y : expression , RADIUS : expression , color_expression }
Rule 10    color_expression -> COLOR : ( expression , expression , expression )
Rule 11    expression -> expression ADD_OP expression
Rule 12    expression -> expression MUL_OP expression
Rule 13    expression -> NUMBER
Rule 14    expression -> IDENTIFIER
Rule 15    expression -> ( expression )
Rule 16    expression -> ADD_OP expression
Rule 17    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 10 15
)                    : 10 15
,                    : 9 9 9 10 10
:                    : 9 9 9 10
;                    : 2
=                    : 17
ADD_OP               : 11 16
CIRCLE               : 9
COLOR                : 10
H                    : 
IDENTIFIER           : 14 17
MUL_OP               : 12
NUMBER               : 13
PRINT                : 6
RADIUS               : 9
W                    : 
WHILE                : 7
X                    : 9
Y                    : 9
error                : 
{                    : 7 9
}                    : 7 9

Nonterminals, with rules where they appear

assignation          : 3
circle_g             : 8
color_expression     : 9
expression           : 6 7 9 9 9 10 10 10 11 11 12 12 15 16 17
program              : 2 7 0
shape                : 5
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . shape
    (6) statement -> . PRINT expression
    (17) assignation -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { program }
    (8) shape -> . circle_g
    (9) circle_g -> . CIRCLE { X : expression , Y : expression , RADIUS : expression , color_expression }

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    CIRCLE          shift and go to state 10

    program                        shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    shape                          shift and go to state 5
    circle_g                       shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . ; program

    $end            reduce using rule 1 (program -> statement .)
    }               reduce using rule 1 (program -> statement .)
    ;               shift and go to state 11


state 3

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 5

    (5) statement -> shape .

    ;               reduce using rule 5 (statement -> shape .)
    $end            reduce using rule 5 (statement -> shape .)
    }               reduce using rule 5 (statement -> shape .)


state 6

    (6) statement -> PRINT . expression
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 12

state 7

    (17) assignation -> IDENTIFIER . = expression

    =               shift and go to state 17


state 8

    (7) structure -> WHILE . expression { program }
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 18

state 9

    (8) shape -> circle_g .

    ;               reduce using rule 8 (shape -> circle_g .)
    $end            reduce using rule 8 (shape -> circle_g .)
    }               reduce using rule 8 (shape -> circle_g .)


state 10

    (9) circle_g -> CIRCLE . { X : expression , Y : expression , RADIUS : expression , color_expression }

    {               shift and go to state 19


state 11

    (2) program -> statement ; . program
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . shape
    (6) statement -> . PRINT expression
    (17) assignation -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { program }
    (8) shape -> . circle_g
    (9) circle_g -> . CIRCLE { X : expression , Y : expression , RADIUS : expression , color_expression }

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    CIRCLE          shift and go to state 10

    statement                      shift and go to state 2
    program                        shift and go to state 20
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    shape                          shift and go to state 5
    circle_g                       shift and go to state 9

state 12

    (6) statement -> PRINT expression .
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ;               reduce using rule 6 (statement -> PRINT expression .)
    $end            reduce using rule 6 (statement -> PRINT expression .)
    }               reduce using rule 6 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 22


state 13

    (16) expression -> ADD_OP . expression
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 23

state 14

    (13) expression -> NUMBER .

    ADD_OP          reduce using rule 13 (expression -> NUMBER .)
    MUL_OP          reduce using rule 13 (expression -> NUMBER .)
    ;               reduce using rule 13 (expression -> NUMBER .)
    $end            reduce using rule 13 (expression -> NUMBER .)
    }               reduce using rule 13 (expression -> NUMBER .)
    {               reduce using rule 13 (expression -> NUMBER .)
    )               reduce using rule 13 (expression -> NUMBER .)
    ,               reduce using rule 13 (expression -> NUMBER .)


state 15

    (14) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 14 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 14 (expression -> IDENTIFIER .)
    ;               reduce using rule 14 (expression -> IDENTIFIER .)
    $end            reduce using rule 14 (expression -> IDENTIFIER .)
    }               reduce using rule 14 (expression -> IDENTIFIER .)
    {               reduce using rule 14 (expression -> IDENTIFIER .)
    )               reduce using rule 14 (expression -> IDENTIFIER .)
    ,               reduce using rule 14 (expression -> IDENTIFIER .)


state 16

    (15) expression -> ( . expression )
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 24

state 17

    (17) assignation -> IDENTIFIER = . expression
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 25

state 18

    (7) structure -> WHILE expression . { program }
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    {               shift and go to state 26
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 22


state 19

    (9) circle_g -> CIRCLE { . X : expression , Y : expression , RADIUS : expression , color_expression }

    X               shift and go to state 27


state 20

    (2) program -> statement ; program .

    $end            reduce using rule 2 (program -> statement ; program .)
    }               reduce using rule 2 (program -> statement ; program .)


state 21

    (11) expression -> expression ADD_OP . expression
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 28

state 22

    (12) expression -> expression MUL_OP . expression
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 29

state 23

    (16) expression -> ADD_OP expression .
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 16 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 16 (expression -> ADD_OP expression .)
    ;               reduce using rule 16 (expression -> ADD_OP expression .)
    $end            reduce using rule 16 (expression -> ADD_OP expression .)
    }               reduce using rule 16 (expression -> ADD_OP expression .)
    {               reduce using rule 16 (expression -> ADD_OP expression .)
    )               reduce using rule 16 (expression -> ADD_OP expression .)
    ,               reduce using rule 16 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 21 ]
  ! MUL_OP          [ shift and go to state 22 ]


state 24

    (15) expression -> ( expression . )
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    )               shift and go to state 30
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 22


state 25

    (17) assignation -> IDENTIFIER = expression .
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ;               reduce using rule 17 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 17 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 17 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 22


state 26

    (7) structure -> WHILE expression { . program }
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . shape
    (6) statement -> . PRINT expression
    (17) assignation -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { program }
    (8) shape -> . circle_g
    (9) circle_g -> . CIRCLE { X : expression , Y : expression , RADIUS : expression , color_expression }

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    CIRCLE          shift and go to state 10

    program                        shift and go to state 31
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    shape                          shift and go to state 5
    circle_g                       shift and go to state 9

state 27

    (9) circle_g -> CIRCLE { X . : expression , Y : expression , RADIUS : expression , color_expression }

    :               shift and go to state 32


state 28

    (11) expression -> expression ADD_OP expression .
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 11 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 11 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 11 (expression -> expression ADD_OP expression .)
    }               reduce using rule 11 (expression -> expression ADD_OP expression .)
    {               reduce using rule 11 (expression -> expression ADD_OP expression .)
    )               reduce using rule 11 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 11 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 22

  ! MUL_OP          [ reduce using rule 11 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 21 ]


state 29

    (12) expression -> expression MUL_OP expression .
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 12 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 12 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 12 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 12 (expression -> expression MUL_OP expression .)
    }               reduce using rule 12 (expression -> expression MUL_OP expression .)
    {               reduce using rule 12 (expression -> expression MUL_OP expression .)
    )               reduce using rule 12 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 12 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 21 ]
  ! MUL_OP          [ shift and go to state 22 ]


state 30

    (15) expression -> ( expression ) .

    ADD_OP          reduce using rule 15 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 15 (expression -> ( expression ) .)
    ;               reduce using rule 15 (expression -> ( expression ) .)
    $end            reduce using rule 15 (expression -> ( expression ) .)
    }               reduce using rule 15 (expression -> ( expression ) .)
    {               reduce using rule 15 (expression -> ( expression ) .)
    )               reduce using rule 15 (expression -> ( expression ) .)
    ,               reduce using rule 15 (expression -> ( expression ) .)


state 31

    (7) structure -> WHILE expression { program . }

    }               shift and go to state 33


state 32

    (9) circle_g -> CIRCLE { X : . expression , Y : expression , RADIUS : expression , color_expression }
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 34

state 33

    (7) structure -> WHILE expression { program } .

    ;               reduce using rule 7 (structure -> WHILE expression { program } .)
    $end            reduce using rule 7 (structure -> WHILE expression { program } .)
    }               reduce using rule 7 (structure -> WHILE expression { program } .)


state 34

    (9) circle_g -> CIRCLE { X : expression . , Y : expression , RADIUS : expression , color_expression }
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ,               shift and go to state 35
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 22


state 35

    (9) circle_g -> CIRCLE { X : expression , . Y : expression , RADIUS : expression , color_expression }

    Y               shift and go to state 36


state 36

    (9) circle_g -> CIRCLE { X : expression , Y . : expression , RADIUS : expression , color_expression }

    :               shift and go to state 37


state 37

    (9) circle_g -> CIRCLE { X : expression , Y : . expression , RADIUS : expression , color_expression }
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 38

state 38

    (9) circle_g -> CIRCLE { X : expression , Y : expression . , RADIUS : expression , color_expression }
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ,               shift and go to state 39
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 22


state 39

    (9) circle_g -> CIRCLE { X : expression , Y : expression , . RADIUS : expression , color_expression }

    RADIUS          shift and go to state 40


state 40

    (9) circle_g -> CIRCLE { X : expression , Y : expression , RADIUS . : expression , color_expression }

    :               shift and go to state 41


state 41

    (9) circle_g -> CIRCLE { X : expression , Y : expression , RADIUS : . expression , color_expression }
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 42

state 42

    (9) circle_g -> CIRCLE { X : expression , Y : expression , RADIUS : expression . , color_expression }
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ,               shift and go to state 43
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 22


state 43

    (9) circle_g -> CIRCLE { X : expression , Y : expression , RADIUS : expression , . color_expression }
    (10) color_expression -> . COLOR : ( expression , expression , expression )

    COLOR           shift and go to state 45

    color_expression               shift and go to state 44

state 44

    (9) circle_g -> CIRCLE { X : expression , Y : expression , RADIUS : expression , color_expression . }

    }               shift and go to state 46


state 45

    (10) color_expression -> COLOR . : ( expression , expression , expression )

    :               shift and go to state 47


state 46

    (9) circle_g -> CIRCLE { X : expression , Y : expression , RADIUS : expression , color_expression } .

    ;               reduce using rule 9 (circle_g -> CIRCLE { X : expression , Y : expression , RADIUS : expression , color_expression } .)
    $end            reduce using rule 9 (circle_g -> CIRCLE { X : expression , Y : expression , RADIUS : expression , color_expression } .)
    }               reduce using rule 9 (circle_g -> CIRCLE { X : expression , Y : expression , RADIUS : expression , color_expression } .)


state 47

    (10) color_expression -> COLOR : . ( expression , expression , expression )

    (               shift and go to state 48


state 48

    (10) color_expression -> COLOR : ( . expression , expression , expression )
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 49

state 49

    (10) color_expression -> COLOR : ( expression . , expression , expression )
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ,               shift and go to state 50
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 22


state 50

    (10) color_expression -> COLOR : ( expression , . expression , expression )
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 51

state 51

    (10) color_expression -> COLOR : ( expression , expression . , expression )
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ,               shift and go to state 52
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 22


state 52

    (10) color_expression -> COLOR : ( expression , expression , . expression )
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . ( expression )
    (16) expression -> . ADD_OP expression

    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 53

state 53

    (10) color_expression -> COLOR : ( expression , expression , expression . )
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    )               shift and go to state 54
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 22


state 54

    (10) color_expression -> COLOR : ( expression , expression , expression ) .

    }               reduce using rule 10 (color_expression -> COLOR : ( expression , expression , expression ) .)

